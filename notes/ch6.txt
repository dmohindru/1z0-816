REVIEWING MODULE DIRECTIVES
---------------------------

Common module directives
Derivative				Description
---------------------------------------------------------------------------------------------------------------------------------------
exports <package>			Allows all modules to access the package
exports <package> to <module>		Allows a specific module to access the package
requires <module>			Indicates module is dependent on another module
requires transitive <module>		Indicates the module and that all modules that use this module are dependent on another module
uses <interface>			Indicates that a module uses a service
provides <interface> with <class>	Indicates that a module provides an implementation of a service

COMPARING TYPES OF MODULES
--------------------------

Types of Modules
1. Named Modules
2. Automatic Modules
3. Unnamed Modules

Named Modules
A named module is one containing a module-info file. To review, this file appears in the root of the JAR alongside one or more packages. Unless otherwise specified, a module is a named module. Named modules appear on the module path rather than the classpath.

Automatic Modules
An automatic module appears on the module path but does not contain a module-info file. It is simply a regular JAR file that is placed on the module path and gets treated as a module. The code referencing an automatic module treats it as if there is a module-info file present. It automatically exports all packages. It also determines the module name. When Java 9 was released, authors of Java libraries were encouraged to declare the name they intended to use for the module in the future. All they had to do was set a property called Automatic-Module-Name in the MANIFEST.MF file.

If the JAR file does not specify an automatic module name, Java will still allow you to use it in the module path. In this case, Java will determine the module name for you. 

Let's review the algorithm in a list for determining the name of an automatic module.

If the MANIFEST.MF specifies an Automatic-Module-Name, use that. Otherwise, proceed with the remaining rules.
1. Remove the file extension from the JAR name.
2. Remove any version information from the end of the name. A version is digits and dots with possible extra information at the end, for example, -1.0.0 or -1.0-RC.
3. Replace any remaining characters other than letters and numbers with dots.
4. Replace any sequences of dots with a single dot.
5. Remove the dot if it is the first or last character of the result.

Practicing with automatic module names
#	Description				Example 1				Example 2
-----------------------------------------------------------------------------------------------------------
1	Beginning JAR name			commons2-x-1.0.0-SNAPSHOT.jar		mod_$-1.0.jar
2	Remove file extension			commons2-x-1.0.0-SNAPSHOT		mod_$-1.0
3	Remove version information		commons2-x				mod_$
4	Replace special characters		commons2.x				mod..
5	Replace sequence of dots		commons2.x				mod.
6	Remove leading/trailing dots 
(results in the automatic module name)	commons2.x				mod

Unnamed Modules
An unnamed module appears on the classpath. Like an automatic module, it is a regular JAR. Unlike an automatic module, it is on the classpath rather than the module path. 
This means an unnamed module is treated like old code and a second-class citizen to modules. An unnamed module does not usually contain a module-info file. If it happens to contain one, that file will be ignored since it is on the classpath. 
Unnamed modules do not export any packages to named or automatic modules. The unnamed module can read from any JARs on the classpath or module path. 
Unnammed module is not available to any modules on module path. Hence, an unnamed module exports no packages to named modules.

Properties of modules types
Property								Named				Automatic			Unnamed
-------------------------------------------------------------------------------------------------------------------------------------------------------
A_____module contains a module-info file?				Yes				No				Ignored if present
A_____module exports which packages to other modules?		Those in the module-info file	All packages			No packages
A_____module is readable by other modules on the module path?	Yes				Yes				No
A_____module is readable by other JARs on the classpath?		Yes				Yes				Yes


ANALYZING JDK DEPENDENCIES
--------------------------
Identifying Built-in Modules
Prior to Java 9, developers could use any package in the JDK by merely importing it into the application. This meant the whole JDK had to be available at runtime because a program could potentially need anything. With modules, your application specifies which parts of the JDK it uses. This allows the application to run on a full JDK or a subset.

The most important module to know is java.base. It contains most of the packages you have been learning about for the exam. In fact, it is so important that you don't even have to use the requires directive; it is available to all modular applications.

Common modules
Module name	What it contains					Coverage in book
------------------------------------------------------------------------------------------------------------
java.base	Collections, Math, IO, NIO.2, Concurrency, etc.	Most of this book
java.desktop	Abstract Windows Toolkit (AWT) and Swing		Not on the exam beyond the module name
java.logging	Logging						Not on the exam beyond the module name
java.sql	JDBC							Chapter 10, “JDBC”
java.xml	Extensible Markup Language (XML)			Not on the exam beyond the module name

For the exam, you need to know that module names begin with java for APIs you are likely to use and with jdk for APIs that are specific to the JDK.
Java modules prefixed with java
java.base		java.naming		java.smartcardio
java.compiler		java.net .http		java.sql
java.datatransfer	java.prefs		java.sql.rowset
java.desktop		java.rmi		java.transaction.xa
java.instrument	java.scripting		java.xml
java.logging		java.se		java.xml.crypto
java.management	java.security.jgss	
java.management.rmi	java.security.sasl	

Table below lists all the modules that begin with jdk. We recommend reviewing this right before the exam to increase the chances of them sounding familiar.
Java modules prefixed with jdk
jdk.accessiblity		jdk.jconsole		jdk.naming.dns
jdk.attach			jdk.jdeps		jdk.naming.rmi
jdk.charsets			jdk.jdi		jdk.net
jdk.compiler			jdk.jdwp.agent		jdk.pack
jdk.crypto.cryptoki		jdk.jfr		jdk.rmic
jdk.crypto.ec			jdk.jlink		jdk.scripting.nashorn
jdk.dynalink			jdk.jshell		jdk.sctp
jdk.editpad			jdk.jsobject		jdk.security.auth
jdk.hotspot.agent		jdk.jstatd		jdk.security.jgss
jdk.httpserver			jdk.localdata		jdk.xml.dom
jdk.jartool			jdk.management		jdk.zipfs
jdk.javadoc			jdk.management.agent	
jdk.jcmd			jdk.management.jfr	

The jdeps command gives you information about dependencies. Luckily, you are not expected to memorize all the options for the 1Z0-816 exam.

Capabilities of jdeps
1. It can provide information about dependencies on the class or package level.
2. It can run against a regular JAR.

Below command prints dependies of zoo.dino.jar file
# jdeps zoo.dino.jar 

Below command prints dependies of zoo.dino.jar file in summary mode
# jdeps -s zoo.dino.jar

The jdeps command has an option to provide details about these unsupported APIs. 
# jdeps --jdk-internals zoo.dino.jar 


MIGRATING AN APPLICATION
------------------------

For a bottom-up migration, you follow these steps:

1. Pick the lowest-level project that has not yet been migrated. (Remember the way we ordered them by dependencies in the previous section?)
2. Add a module-info.java file to that project. Be sure to add any exports to expose any package used by higher-level JAR files. Also, add a requires directive for any modules it depends on.
3. Move this newly migrated named module from the classpath to the module path.
4. Ensure any projects that have not yet been migrated stay as unnamed modules on the classpath.
5. Repeat with the next-lowest-level project until you are done.

A top-down migration strategy is most useful when you don't have control of every JAR file used by your application. For example, suppose another team owns one project. They are just too busy to migrate. You wouldn't want this situation to hold up your entire migration.

For a top-down migration, you follow these steps:
1. Place all projects on the module path.
2. Pick the highest-level project that has not yet been migrated.
3. Add a module-info file to that project to convert the automatic module into a named module. Again, remember to add any exports or requires directives. You can use the automatic module name of other modules when writing the requires directive since most of the projects on the module path do not have names yet.
4. Repeat with the next-lowest-level project until you are done.

Comparing migration strategies
Category				Bottom-Up				Top-Down
----------------------------------------------------------------------------------------------------------------
A project that depends on all others	Unnamed module on the classpath	Named module on the module path
A project that has no dependencies	Named module on the module path	Automatic module on the module path

Suppose you start with an application that has a number of packages. The first step is to break them up into logical groupings and draw the dependencies between them.

The Java Platform Module System does not allow for cyclic dependencies. A cyclic dependency, or circular dependency, is when two things directly or indirectly depend on each other. 

A common technique to break cyclic dependencies is to introduce another module. That module contains the code that the other two modules share. 

This is one of the advantages of the module system. It prevents you from writing code that has cyclic dependency. Such code won't even compile!

Note: Java will still allow you to have a cyclic dependency between packages within a module. It enforces that you do not have a cyclic dependency between modules.

Note: Remember from learning about top-down migration that modules on the module path are not allowed to refer to the classpath



CREATING A SERVICE
-------------------

A service is composed of an interface, any classes the interface references, and a way of looking up implementations of the interface. The implementations are not part of the service.

Note: A service provider “interface” can be an abstract class rather than an actual interface. Since you will only see it as an interface on the exam, we use that term in the book.

To complete our service, we need a service locator. A service locator is able to find any classes that implement a service provider interface.

Luckily, Java provides a ServiceLocator class to help with this task. You pass the service provider interface type to its load() method, and Java will return any implementation services it can find. 

// TourFinder.java
package zoo.tours.reservations;
 
import java.util.*;
import zoo.tours.api.*;
 
public class TourFinder {
 
   public static Tour findSingleTour() {
      ServiceLoader<Tour> loader = ServiceLoader.load(Tour.class);
      for (Tour tour : loader)
         return tour;
      return null;
   }
   public static List<Tour> findAllTours() {
      List<Tour> tours = new ArrayList<>();
      ServiceLoader<Tour> loader = ServiceLoader.load(Tour.class);
      for (Tour tour : loader)
         tours.add(tour);
      return tours;
   }
}

Our module definition exports the package with the lookup class TourFinder. It requires the service provider interface package. It also has the uses directive since it will be looking up a service.

// module-info.java
module zoo.tours.reservations {
   exports zoo.tours.reservations;
   requires zoo.tours.api;
   uses zoo.tours.api.Tour;
}
Remember that both requires and uses are needed, one for compilation and one for lookup. 

Tip: The ServiceLoader call is relatively expensive. If you are writing a real application, it is best to cache the result.

A service provider is the implementation of a service provider interface. As we said earlier, at runtime it is possible to have multiple implementation classes or modules.

Again, we need a module-info.java file to create a module.

// module-info.java
module zoo.tours.agency {
   requires zoo.tours.api;
   provides zoo.tours.api.Tour with zoo.tours.agency.TourImpl;
}

We don't export the package that implements the interface since we don't want callers referring to it directly. Instead, we use the provides directive. This allows us to specify that we provide an implementation of the interface with a specific implementation class. The syntax looks like this:

provides interfaceName with className;

Notice how we didn't recompile the zoo.tours.reservations or zoo.visitor package. The service locator was able to observe that there was now a service provider implementation available and find it for us.

Java allows only one service provider for a service provider interface in a module. If you wanted to offer another tour, you would need to create a separate module.

There are two methods in ServiceLoader that you need to know for the exam. The declaration is as follows, sans the full implementation:

public final class ServiceLoader<S> implements Iterable<S> {
 
   public static <S> ServiceLoader<S> load(Class<S> service) { … }
 
   public Stream<Provider<S>> stream() { … }
 
   // Additional methods
}

Reviewing services
Artifact				Part of the service	Directives required in module-info.java
-----------------------------------------------------------------------------------------------------
Service provider interface		Yes			exports
Service provider			No			requires 
								provides
Service locator			Yes			exports 
								requires 
								uses
Consumer				No			requires

Summary of Services
Services in modules comprises of four components

1. Service provider interface: This component is essentially like a normal module but has an interface or abstract class defined which some other module will provide with a implementation. This component has a exports directive which exports its packages to outside world.
exports service_provider_interface_package_name;


2. Service locator: This component find classes that provide implementation for service provider interface component. It uses ServiceLoader<T> class to load the required implementation classes. In its module-info.java it uses requires and uses directives.
exports package_name_which_provide_locator_service; // name of package which provides service locator
requires service_provider_interface_module_name; // for module which provide service provider interface
uses fully_qualified_interface_name; // for fully qualified name of interface or abstract class for which ServiceLoad with find implementation. 
Together Service locator and Service provider interface form a complete service.

3. Service provider: This component provide implementation for service provider interface. Again it a normal module which would implement an interface or extend an abstract class declared in Service provider interface. For its module-info.java file its contains following directives
requires service_provider_module_name; // Service provider module name
provides fully_qualified_service_provider_interface_name with fully_qualified_implementation_class_name; 
// contains fully qualified file name for interface and implementation classes

4. Consumer: This component consumes the services. Its module-info.java file contains following directives
required service_provider_interface_module_name;
requires service_locator_module_name;

