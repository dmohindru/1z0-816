ANNOTATIONS
-----------
Annotations solved this by having the data and the information about the data defined in the same location. 

That brings us to our first rule about annotations: annotations function a lot like interfaces. In this example, annotations allow us to mark a class as a ZooAnimal without changing its inheritance structure.

So if annotations function like interfaces, why don't we just use interfaces? While interfaces can be applied only to classes, annotations can be applied to any declaration including classes, methods, expressions, and even other annotations. Also, unlike interfaces, annotations allow us to pass a set of values where they are applied.

That brings us to our second rule about annotations: annotations establish relationships that make it easier to manage data about our application. Sure, we could write applications without annotations, but that often requires creating a lot of extra classes, interfaces, or data files (XML, JSON, etc.) to manage these complex relationships. 

This brings us to our third rule about annotations: an annotation ascribes custom information on the declaration where it is defined. This turns out to be a powerful tool, as the same annotation can often be applied to completely unrelated classes or variables.

There's one final rule about annotations you should be familiar with: annotations are optional metadata and by themselves do not do anything. This means you can take a project filled with thousands of annotations and remove all of them, and it will still compile and run, albeit with potentially different behavior at runtime.

While an annotation can be removed from a class and it will still compile, the opposite is not true; adding an annotation can trigger a compiler error. 

CREATING CUSTOM ANNOTATIONS
---------------------------

When using a marker annotation, parentheses are optional. Once we start adding elements, though, they are required if the annotation includes any values.

If an annotation is declared on a line by itself, then it applies to the next nonannotation type found on the proceeding lines.

Annotation names are case sensitive. Like class and interface names, it is common practice to have them start with an uppercase letter, although it is not required.

Behind the scenes, the JVM is creating annotation elements as interface methods and annotations as implementations of these interfaces.

Providing an optional elements: First, when we have more than one element value within an annotation, we separate them by a comma (,). Next, each element is written using the syntax elementName = elementValue. It's like a shorthand for a Map. Also, the order of each element does not matter. Cheetah could have listed hoursPerDay first.

Similar to case statement values, the default value of an annotation must be a non- null constant expression.

An annotation element cannot be declared with just any type. It must be a primitive type, a String, a Class, an enum, another annotation, or an array of any of these types. While primitive types like int and long are supported, wrapper classes like Integer and Long are not. The type String[] is supported, as it is an array of String values, but String[][] is not. e.g.

Like abstract interface methods, annotation elements are implicitly abstract and public, whether you declare them that way or not. The elements material() and friendly() do not compile because the access modifier conflicts with the elements being implicitly public. The element isBunny() does not compile because, like abstract methods, it cannot be marked final.
public @interface Fluffy {
   int cuteness();
   public abstract int softness() default 11;
   protected Material material();  // DOES NOT COMPILE
   private String friendly();      // DOES NOT COMPILE
   final boolean isBunny();        // DOES NOT COMPILE
}

Annotations can include constant variables that can be accessed by other classes without actually creating the annotation. Just like interface variables, annotation variables are implicitly public, static, and final.

Remember, a marker annotation is one that does not contain any elements. e.g.
public @interface Material {}

Refer Fig 2.1 for annotation declaration rules
Refer Fig 2.2 for using annotation rules 


APPLYING ANNOTATIONS
--------------------
Annotations can be applied to any Java declaration including the following:

- Classes, interfaces, enums, and modules
- Variables (static, instance, local)
- Methods and constructors
- Method, constructor, and lambda parameters
- Cast expressions
- Other annotations

In this example, we applied annotations to various declarations, but this isn't always permitted. An annotation can specify which declaration type they can be applied to using the @Target annotation.

When applying an annotation to an expression, a cast operation including the Java type is required. 

The following is valid syntax under the right condition:
@Injured("Broken Tail") public class Monkey {}

An annotation must adhere to the following rules to be used without a name:

- The annotation declaration must contain an element named value(), which may be optional or required.
- The annotation declaration must not contain any other elements that are required.
- The annotation usage must not provide values for any other elements.

Let's create an annotation that meets these requirements.
public @interface Injured {
   String veterinarian() default "unassigned";
   String value() default "foot";
   int age() default 1;
}

This annotation can be applied in following way.
public abstract class Elephant {
   @Injured("Legs") public void fallDown() {}
   @Injured(value="Legs") public abstract int trip();
   @Injured String injuries[];
}


Annotations support a shorthand notation for providing an array that contains a single element.
Lets say: 
public @interface Music {
   String[] genres();
}
Following are valid way to apply this annotatoin
public class Giraffe {
@Music(genres={"I love you"}) public String track1;
@Music(generes="I love you") public String track2;
}

Following are invalid way to apply this annotation
public class Giraffe {
@Music(genres="I love you", "rock and roll") public String track1; // will not compile
@Music(generes=) public String track2;			     // will not compile
@Music(generes=null) public String track3;			     // will not compile
@Music(generes={}) public String track4;			     // will compile

}




DECLARING ANNOTATION-SPECIFIC ANNOTATIONS
-----------------------------------------
Many annotation declarations include @Target annotation, which limits the types the annotation can be applied to. More specifically, the @Target annotation takes an array of ElementType enum values as its value() element.
Values for the @Target annotation
TYPE			Classes, interfaces, enums, annotations
FIELD			Instance and static variables, enum values
METHOD			Method declarations
PARAMETER		Constructor, method, and lambda parameters
CONSTRUCTOR		Constructor declarations
LOCAL_VARIABLE		Local variables
ANNOTATION_TYPE	Annotations
PACKAGE *		Packages declared in package-info.java
TYPE_PARAMETER *	Parameterized types, generic declarations
TYPE_USE		Able to be applied anywhere there is a Java type declared or used
MODULE *		Modules
* Applying these with annotations is out of scope for the exam.

While most of the values in Table 2.1 are straightforward, TYPE_USE is without a doubt the most complex. The TYPE_USE parameter can be used anywhere there is a Java type. There are a few exceptions; for example, it can be used only on a method that returns a value. Methods that return void would still need the METHOD value defined in the annotation.

Annotations may be discarded by the compiler or at runtime. We say “may,” because we can actually specify how they are handled using the @Retention annotation. This annotation takes a value() of the enum RetentionPolicy.
Possible values, in increasing order of retention.
SOURCE			Used only in the source file, discarded by the compiler
CLASS			Stored in the .class file but not available at runtime (default compiler behavior)
RUNTIME		Stored in the .class file and available at runtime

You should be familiar with the marker annotation @Documented. If present, then the generated Javadoc will include annotation information defined on Java types.

Another marker annotation you should know for the exam is @Inherited. When this annotation is applied to a class, subclasses will inherit the annotation information found in the parent class.

The @Repeatable annotation is used when you want to specify an annotation more than once on a type. That brings us to our next rule: to declare a @Repeatable annotation, you must define a containing annotation type value.
Rules for declaring a repeatable annotation
- The repeatable annotation must be declared with @Repeatable and contain a value that refers to the containing type annotation.
- The containing type annotation must include an element named value(), which is a primitive array of the repeatable annotation type.

When @Target is not present, an annotation can be used in any place except TYPE_USE or TYPE_PARAMETER scenarios (cast operations, object creation, generic declarations, etc.). <-- work on this one

USING COMMON ANNOTATIONS
------------------------
Using @Override annotations is not required, but using them incorrectly is prohibited.

The @FunctionalInterface marker annotation can be applied to any valid functional interface.

With @Deprecated annotation we notify our user and give them time to migrate their code to new version before this version is finally removed. Note that the @Deprecated annotation does not allow you to provide any suggested alternatives. For that, you should use the Javadoc annotation.

Enter @SuppressWarnings. Applying this annotation to a class, method, or type basically tells the compiler, “I know what I am doing; do not warn me about this.” It requires a String[] value() parameter. As describe below.
"deprecation"		Ignore warnings related to types or methods marked with the @Deprecated annotation.
"unchecked"		Ignore warnings related to the use of raw types, such as List instead of List<String>.

The @SafeVargs marker annotation indicates that a method does not perform any potential unsafe operations on its varargs parameter. It can be applied only to constructors or methods that cannot be overridden (aka methods marked private, static, or final).

