WORKING WITH BUILT-IN FUNCTIONAL INTERFACE
------------------------------------------
Common functional interfaces

Functional interface		Return type		Method name		# of parameters
--------------------------------------------------------------------------------------------
Supplier<T>			T			get()			0
Consumer<T>			void			accept(T)		1 (T)
BiConsumer<T, U>		void			accept(T,U)		2 (T, U)
Predicate<T>			boolean		test(T)		1 (T)
BiPredicate<T, U>		boolean		test(T,U)		2 (T, U)
Function<T, R>			R			apply(T)		1 (T)
BiFunction<T, U, R>		R			apply(T,U)		2 (T, U)
UnaryOperator<T>		T			apply(T)		1 (T)
BinaryOperator<T>		T			apply(T,T)		2 (T, T)

A Supplier is used when you want to generate or supply values without taking any input. The Supplier interface is defined as follows:
@FunctionalInterface
public interface Supplier<T> {
   T get();
}

You use a Consumer when you want to do something with a parameter but not return anything. BiConsumer does the same thing except that it takes two parameters. The interfaces are defined as follows:
@FunctionalInterface
public interface Consumer<T> {
   void accept(T t);
   // omitted default method
}
 @FunctionalInterface
public interface BiConsumer<T, U> {
   void accept(T t, U u);
   // omitted default method

A BiPredicate is just like a Predicate except that it takes two parameters instead of one. The interfaces are defined as follows:
@FunctionalInterface
public interface Predicate<T> {
   boolean test(T t);
   // omitted default and static methods
}
@FunctionalInterface
public interface BiPredicate<T, U> {
   boolean test(T t, U u);
   // omitted default methods
}

A Function is responsible for turning one parameter into a value of a potentially different type and returning it. Similarly, a BiFunction is responsible for turning two parameters into a value and returning it. The interfaces are defined as follows:
@FunctionalInterface
public interface Function<T, R> {
   R apply(T t);
   // omitted default and static methods
}
@FunctionalInterface
public interface BiFunction<T, U, R> {
   R apply(T t, U u);
   // omitted default method
}

UnaryOperator and BinaryOperator are a special case of a Function. They require all type parameters to be the same type. A UnaryOperator transforms its value into one of the same type. For example, incrementing by one is a unary operation. In fact, UnaryOperator extends Function. A BinaryOperator merges two values into one of the same type. Adding two numbers is a binary operation. Similarly, BinaryOperator extends BiFunction. The interfaces are defined as follows:

@FunctionalInterface
public interface UnaryOperator<T> extends Function<T, T> { }
 
@FunctionalInterface
public interface BinaryOperator<T> extends BiFunction<T, T, T> { 
   // omitted static methods
}

Creating your own functional interface
Java's built-in interfaces are meant to facilitate the most common functional interfaces that you'll need. It is by no means an exhaustive list. Remember that you can add any functional interfaces you'd like, and Java matches them when you use lambdas or method references.

Convenience methods

Interface instance		Method return type		Method name		Method parameters
-------------------------------------------------------------------------------------------------------
Consumer			Consumer			andThen()		Consumer
Function			Function			andThen()		Function
Function			Function			compose()		Function
Predicate			Predicate			and()			Predicate
Predicate			Predicate			negate()		—
Predicate			Predicate			or()			Predicate

Let's start with these two Predicate variables.

Predicate<String> egg = s -> s.contains("egg");
Predicate<String> brown = s -> s.contains("brown");

Now we want a Predicate for brown eggs and another for all other colors of eggs. We could write this by hand, as shown here:
Predicate<String> brownEggs = s -> s.contains("egg") && s.contains("brown");
Predicate<String> otherEggs = s -> s.contains("egg") && ! s.contains("brown");

Not a great way to code. A better way to deal with this situation is to use two of the default methods on Predicate.
Predicate<String> brownEggs = egg.and(brown);
Predicate<String> otherEggs = egg.and(brown.negate());

Moving on to Consumer, let's take a look at the andThen() method, which runs two functional interfaces in sequence.
Consumer<String> c1 = x -> System.out.print("1: " + x);
Consumer<String> c2 = x -> System.out.print(",2: " + x);
Consumer<String> combined = c1.andThen(c2);
combined.accept("Annie");              // 1: Annie,2: Annie

By contrast, the compose() method on Function chains functional interfaces. However, it passes along the output of one to the input of another.
Function<Integer, Integer> before = x -> x + 1;
Function<Integer, Integer> after = x -> x * 2; 
Function<Integer, Integer> combined = after.compose(before);
System.out.println(combined.apply(3));   // 8
This time the before runs first, turning the 3 into a 4. Then the after runs, doubling the 4 to 8. 

RETURNING AN OPTIONAL
----------------------
How do we express this “we don't know” or “not applicable” answer in Java? We use the Optional type. An Optional is created using a factory. You can either request an empty Optional or pass a value for the Optional to wrap. Think of an Optional as a box that might have something in it or might instead be empty.


Optional o = (value == null) ? Optional.empty() : Optional.of(value);
Optional o = Optional.ofNullable(value);

Optional instance methods
Method				When Optional is empty				When Optional contains a value
---------------------------------------------------------------------------------------------------------------
get()				Throws an exception				Returns value
ifPresent(Consumer c)		Does nothing					Calls Consumer with value
isPresent()			Returns false					Returns true
orElse(T other)		Returns other parameter			Returns value
orElseGet(Supplier s)		Returns result of calling Supplier		Returns value
orElseThrow()			Throws NoSuchElementException			Returns value
orElseThrow(Supplier s)	Throws exception created by calling Supplier	Returns value

USING STREAMS
-------------
With streams, the data isn't generated up front—it is created when needed. This is an example of lazy evaluation, which delays execution until necessary. Many things can happen in the assembly line stations along the way. In functional programming, these are called stream operations.

There are three parts to a stream pipeline, as shown in Figure 4.2.
1. Source: Where the stream comes from
2, Intermediate operations: Transforms the stream into another one. There can be as few or as many intermediate operations as you'd like. Since streams use lazy evaluation, the intermediate operations do not run until the terminal operation runs.
3. Terminal operation: Actually produces a result. Since streams can be used only once, the stream is no longer valid after a terminal operation completes.

A stream pipeline has three parts. The source is required, and it creates the data in the stream. There can be zero or more intermediate operations, which aren't executed until the terminal operation runs.


Intermediate vs. terminal operations
Scenario					Intermediate operation		Terminal operation
------------------------------------------------------------------------------------------------
Required part of a useful pipeline?		No				Yes
Can exist multiple times in a pipeline?	Yes				No
Return type is a stream type?			Yes				No
Executed upon method call?			No				Yes
Stream valid after call?			Yes				No

For simplicity, we'll start with finite streams. There are a few ways to create them.
11: Stream<String> empty = Stream.empty();          // count = 0
12: Stream<Integer> singleElement = Stream.of(1);   // count = 1
13: Stream<Integer> fromArray = Stream.of(1, 2, 3); // count = 3

Java also provides a convenient way of converting a Collection to a stream.
14: var list = List.of("a", "b", "c");
15: Stream<String> fromList = list.stream();

It is just as easy to create a parallel stream from a list.
24: var list = List.of("a", "b", "c");
25: Stream<String> fromListParallel = list.parallelStream();

Infinite Streams: So far, this isn't particularly impressive. We could do all this with lists. We can't create an infinite list, though, which makes streams more powerful.

17: Stream<Double> randoms = Stream.generate(Math::random); // generate infinite stream of random numbers 
18: Stream<Integer> oddNumbers = Stream.iterate(1, n -> n + 2); // generate infinite stream of odd number
19: Stream<Integer> oddNumbers = Stream.iterate(1, n -> n < 100, n -> n + 2); // generate stream of odd numbers less than 100.

Stream Creation Methods
Method				Finite or infinite?		Notes
------------------------------------------------------------------------------------------------------------------------------------------------------------
Stream.empty()			Finite				Creates Stream with zero elements
Stream.of(varargs)		Finite				Creates Stream with elements listed
coll.stream()			Finite				Creates Stream from a Collection
coll.parallelStream()		Finite				Creates Stream from a Collection where the stream can run in parallel
Stream.generate(supplier)	Infinite			Creates Stream by calling the Supplier for each element upon request
Stream.iterate(seed, 
unaryOperator)			Infinite			Creates Stream by using the seed for the first element and then calling the UnaryOperator for 									each subsequent element upon request
Stream.iterate(seed, 
predicate, unaryOperator)	Finite or Infinite		Creates Stream by using the seed for the first element and then calling the UnaryOperator for 									each subsequent element upon request. Stops if the Predicate returns false

Terminal stream operations

Method				What happens for infinite streams	Return value	Reduction
----------------------------------------------------------------------------------------------
count()			Does not terminate			long		Yes
min(),max()			Does not terminate			Optional<T>	Yes
findAny(), findFirst()		Terminates				Optional<T>	No
allMatch(), 
anyMatch(), noneMatch()	Sometimes terminates			boolean	No  
forEach()			Does not terminate			void		No
reduce()			Does not terminate			Varies		Yes
collect()			Does not terminate			Varies		Yes


The count() method determines the number of elements in a finite stream. The method signature is as follows:
long count()

The min() and max() methods allow you to pass a custom comparator and find the smallest or largest value in a finite stream according to that sort order. Like the count() method, min() and max() hang on an infinite stream because they cannot be sure that a smaller or larger value isn't coming later in the stream. The method signatures are as follows:
Optional<T> min(Comparator<? super T> comparator)
Optional<T> max(Comparator<? super T> comparator)

Remember, a stream can have only one terminal operation. Once a terminal operation has been run, the stream cannot be used again.

The findAny() and findFirst() methods return an element of the stream unless the stream is empty. If the stream is empty, they return an empty Optional. The method signatures are as follows:
Optional<T> findAny()
Optional<T> findFirst()

The allMatch(), anyMatch(), and noneMatch() methods search a stream and return information about how the stream pertains to the predicate. The method signatures are as follows:
boolean anyMatch(Predicate <? super T> predicate)
boolean allMatch(Predicate <? super T> predicate)
boolean noneMatch(Predicate <? super T> predicate)

Remember that allMatch(), anyMatch(), and noneMatch() return a boolean. By contrast, the find methods return an Optional because they return an element of the stream.
allMatch() does not return for infinite streams.

Like in the Java Collections Framework, it is common to iterate over the elements of a stream. As expected, calling forEach() on an infinite stream does not terminate.
The method signature is as follows:
void forEach(Consumer<? super T> action)

The reduce() method combines a stream into a single object. It is a reduction, which means it processes all elements. The three method signatures are these:

T reduce(T identity, BinaryOperator<T> accumulator)
Optional<T> reduce(BinaryOperator<T> accumulator)
<U> U reduce(U identity, BiFunction<U,? super T,U> accumulator, BinaryOperator<U> combiner)

The collect() method is a special type of reduction called a mutable reduction. It is more efficient than a regular reduction because we use the same mutable object while accumulating. Common mutable objects include StringBuilder and ArrayList. This is a really useful method, because it lets us get data out of streams and into another form. The method signatures are as follows:

<R> R collect(Supplier<R> supplier, BiConsumer<R, ? super T> accumulator, BiConsumer<R, R> combiner) 
<R,A> R collect(Collector<? super T, A,R> collector)

The exam expects you to know about common predefined collectors in addition to being able to write your own by passing a supplier, accumulator, and combiner.

Using Common Intermediate Operations

The filter() method returns a Stream with elements that match a given expression. Here is the method signature:
Stream<T> filter(Predicate<? super T> predicate)

The distinct() method returns a stream with duplicate values removed. The duplicates do not need to be adjacent to be removed. As you might imagine, Java calls equals() to determine whether the objects are the same. The method signature is as follows:
Stream<T> distinct()

The limit() and skip() methods can make a Stream smaller, or they could make a finite stream out of an infinite stream. The method signatures are shown here:
Stream<T> limit(long maxSize)
Stream<T> skip(long n)

The map() method creates a one-to-one mapping from the elements in the stream to the elements of the next step in the stream. The method signature is as follows:
<R> Stream<R> map(Function<? super T, ? extends R> mapper)

The flatMap() method takes each element in the stream and makes any elements it contains top-level elements in a single stream. This is helpful when you want to remove empty elements from a stream or you want to combine a stream of lists.
<R> Stream<R> flatMap(
Function<? super T, ? extends Stream<? extends R>> mapper)

The sorted() method returns a stream with the elements sorted. Just like sorting arrays, Java uses natural ordering unless we specify a comparator. The method signatures are these:
Stream<T> sorted()
Stream<T> sorted(Comparator<? super T> comparator)

The peek() method is our final intermediate operation. It is useful for debugging because it allows us to perform a stream operation without actually changing the stream. The method signature is as follows:
Stream<T> peek(Consumer<? super T> action)

On the exam, you might see long or complex pipelines as answer choices. If this happens, focus on the differences between the answers. Those will be your clues to the correct answer. This approach will also save you time from not having to study the whole pipeline on each option.

WORKING WITH PRIMITIVE STREAMS
------------------------------

Java actually includes other stream classes besides Stream that you can use to work with select primitives: int, double, and long. 

An IntStream has many of the same intermediate and terminal methods as a Stream but includes specialized methods for working with numeric data. The primitive streams know how to perform certain common operations automatically.

Creating Primitive Streams
Here are three types of primitive streams.
1. IntStream: Used for the primitive types int, short, byte, and char
2. LongStream: Used for the primitive type long
3. DoubleStream: Used for the primitive types double and float

When you see the word stream on the exam, pay attention to the case. With a capital S or in code, Stream is the name of a class that contains an Object type. With a lowercase s, a stream is a concept that might be a Stream, DoubleStream, IntStream, or LongStream.

Refer table 4.7 for common primitive stream methods

Some of the methods for creating a primitive stream are equivalent to how we created the source for a regular Stream. You can create an empty stream with this:
DoubleStream empty = DoubleStream.empty();

Another way is to use the of() factory method from a single value or by using the varargs overload.
DoubleStream oneValue = DoubleStream.of(3.14);
oneValue.forEach(System.out::println);
 
DoubleStream varargs = DoubleStream.of(1.0, 1.1, 1.2);
varargs.forEach(System.out::println);

You can also use the two methods for creating infinite streams, just like we did with Stream.
var random = DoubleStream.generate(Math::random);
var fractions = DoubleStream.iterate(.5, d -> d / 2);
random.limit(3).forEach(System.out::println);
fractions.limit(3).forEach(System.out::println);

Suppose that we wanted a stream with the numbers from 1 through 5. We could write this using what we've explained so far:
IntStream count = IntStream.iterate(1, n -> n+1).limit(5);
count.forEach(System.out::println);

However, it is a lot of code to do something so simple. Java provides a method that can generate a range of numbers.
IntStream range = IntStream.range(1, 6);
range.forEach(System.out::println);

Luckily, there's another method, rangeClosed(), which is inclusive on both parameters.
IntStream rangeClosed = IntStream.rangeClosed(1, 5);
rangeClosed.forEach(System.out::println);

Another way to create a primitive stream is by mapping from another stream type.
Mapping methods between types of streams
Source stream class		To create Stream		To create DoubleStream		To create IntStream		To create LongStream
-------------------------------------------------------------------------------------------------------------------------------------------------
Stream<T>			map()				mapToDouble()			mapToInt()			mapToLong()
DoubleStream			mapToObj()			map()				mapToInt()			mapToLong()
IntStream			mapToObj()			mapToDouble()			map()				mapToLong()

Function parameters when mapping between types of streams
Source stream class		To create Stream		To create DoubleStream		To create IntStream		To create LongStream
-------------------------------------------------------------------------------------------------------------------------------------------------
Stream<T>			Function<T,R>			ToDoubleFunction<T>		ToIntFunction<T>		ToLongFunction<T>
DoubleStream			Double Function<R>		DoubleUnary Operator		DoubleToInt Function		DoubleToLong Function
IntStream			IntFunction<R>			IntToDouble Function		IntUnary Operator		IntToLong Function
LongStream			Long Function<R>		LongToDouble Function		LongToInt Function		LongUnary Operator
LongStream			mapToObj()			mapToDouble()			mapToInt()			map()

The flatMap() method exists on primitive streams as well. It works the same way as on a regular Stream except the method name is different. Here's an example:
var integerList = new ArrayList<Integer>();
IntStream ints = integerList.stream().flatMapToInt(x -> IntStream.of(x));
DoubleStream doubles = integerList.stream().flatMapToDouble(x -> DoubleStream.of(x));
LongStream longs = integerList.stream().flatMapToLong(x -> LongStream.of(x));

Now that you know about primitive streams, you can calculate the average in one line.
var stream = IntStream.rangeClosed(1,10);
OptionalDouble optional = stream.average();

The return type is not the Optional you have become accustomed to using. It is a new type called OptionalDouble. Why do we have a separate type, you might wonder? Why not just use Optional<Double>? The difference is that OptionalDouble is for a primitive and Optional<Double> is for the Double wrapper class. Working with the primitive optional class looks similar to working with the Optional class itself.
optional.ifPresent(System.out::println);                  // 5.5
System.out.println(optional.getAsDouble());               // 5.5
System.out.println(optional.orElseGet(() -> Double.NaN)); // 5.5

Optional types for primitives
						OptionalDouble			OptionalInt			OptionalLong
--------------------------------------------------------------------------------------------------------------------------
Getting as a primitive				getAsDouble()			getAsInt()			getAsLong()
orElseGet() parameter type			DoubleSupplier			IntSupplier			LongSupplier
Return type of max() and min()		OptionalDouble			OptionalInt			OptionalLong
Return type of sum()				double				int				long
Return type of average()			OptionalDouble			OptionalDouble			OptionalDouble

The range is the minimum value subtracted from the maximum value. Uh-oh. Both min() and max() are terminal operations, which means that they use up the stream when they are run. We can't run two terminal operations against the same stream. Luckily, this is a common problem and the primitive streams solve it for us with summary statistics. Statistic is just a big word for a number that was calculated from data.
private static int range(IntStream ints) {
   IntSummaryStatistics stats = ints.summaryStatistics();
   if (stats.getCount() == 0) throw new RuntimeException();
   return stats.getMax()-stats.getMin();
}

Summary statistics include the following:
1. Smallest number (minimum): getMin()
2. Largest number (maximum): getMax()
3. Average: getAverage()
4. Sum: getSum()
5. Number of values: getCount()

Functional Interface for Primitives

BooleanSupplier is a separate type. It has one method to implement:
boolean getAsBoolean()
It works just as you've come to expect from functional interfaces. Here's an example:
12: BooleanSupplier b1 = () -> true;
13: BooleanSupplier b2 = () -> Math.random()> .5;
14: System.out.println(b1.getAsBoolean());  // true
15: System.out.println(b2.getAsBoolean());  // false or true based on random number being generated.

Refer Table 4.11 for functional interface for primitives

Refer Table 4.12 for Primitive specific functional interface.

WORKING WITH ADVANCED STREAM PIPELINE CONCEPTS
----------------------------------------------

Remember that streams are lazily evaluated. So the following code below prints 3.
var cats = new ArrayList<String>();
cats.add("Annie");
cats.add("Ripley");
var stream = cats.stream();
cats.add("KC");
System.out.println(stream.count());

A few of the intermediate operations for streams are available for Optional.
Suppose that you are given an Optional<Integer> and asked to print the value, but only if it is a three-digit number. Without functional programming, you could write the following:
private static void threeDigit(Optional<Integer> optional) {
   if (optional.isPresent()) {  // outer if
      var num = optional.get();
      var string = "" + num;
      if (string.length() == 3) // inner if
         System.out.println(string);
   } 
}
It works, but it contains nested if statements. That's extra complexity. Let's try this again with functional programming.
private static void threeDigit(Optional<Integer> optional) {
   optional.map(n -> "" + n)            // part 1
      .filter(s -> s.length() == 3)     // part 2
      .ifPresent(System.out::println);  // part 3
}

This one works because flatMap removes the unnecessary layer. In other words, it flattens the result. Chaining calls to flatMap() is useful when you want to transform one Optional type to another.
---Study Chaining Optionals topic from book ---
---Study Checked Exception and Function Interface from book---

Refer table 4.13 for Examples of grouping/partitioning collectors

Collecting Using Basic Collectors

Joining all elements of stream
var ohMy = Stream.of("lions", "tigers", "bears");
String result = ohMy.collect(Collectors.joining(", "));
System.out.println(result); // lions, tigers, bears

Calculating average of stream
var ohMy = Stream.of("lions", "tigers", "bears");
Double result = ohMy.collect(Collectors.averagingInt(String::length));
System.out.println(result); // 5.333333333333333

Converting stream to a collection
var ohMy = Stream.of("lions", "tigers", "bears");
TreeSet<String> result = ohMy
   .filter(s -> s.startsWith("t"))
   .collect(Collectors.toCollection(TreeSet::new));
System.out.println(result); // [tigers]


Collecting into Maps

var ohMy = Stream.of("lions", "tigers", "bears");
Map<String, Integer> map = ohMy.collect(
   Collectors.toMap(s -> s, String::length));
System.out.println(map); // {lions=5, bears=5, tigers=6}

Note: Returning the same value passed into a lambda is a common operation, so Java provides a method for it. You can rewrite s -> s as Function.identity(). It is not shorter and may or may not be clearer, so use your judgment on whether to use it.

var ohMy = Stream.of("lions", "tigers", "bears");
Map<Integer, String> map = ohMy.collect(Collectors.toMap(
   String::length, 
   k -> k)); // BAD Throws expection: java.lang.IllegalStateException: Duplicate key 5

Instead write below code
var ohMy = Stream.of("lions", "tigers", "bears");
Map<Integer, String> map = ohMy.collect(Collectors.toMap(
   String::length,
   k -> k, 
  (s1, s2) -> s1 + "," + s2));
System.out.println(map);            // {5=lions,bears, 6=tigers}
System.out.println(map.getClass()); // class java.util.HashMap

If you want to control on which Map implementation is used write below code
var ohMy = Stream.of("lions", "tigers", "bears");
TreeMap<Integer, String> map = ohMy.collect(Collectors.toMap(
   String::length, 
   k -> k, 
   (s1, s2) -> s1 + "," + s2,
   TreeMap::new));
System.out.println(map); //         // {5=lions,bears, 6=tigers}

Collecting Using Grouping, Partitioning, and Mapping

Now suppose that we want to get groups of names by their length. We can do that by saying that we want to group by length.
var ohMy = Stream.of("lions", "tigers", "bears");
Map<Integer, List<String>> map = ohMy.collect(
   Collectors.groupingBy(String::length));
System.out.println(map);    // {5=[lions, bears], 6=[tigers]}

Suppose that we don't want a List as the value in the map and prefer a Set instead. No problem. There's another method signature that lets us pass a downstream collector. This is a second collector that does something special with the values.

var ohMy = Stream.of("lions", "tigers", "bears");
Map<Integer, Set<String>> map = ohMy.collect(
   Collectors.groupingBy(
      String::length, 
      Collectors.toSet()));
System.out.println(map);    // {5=[lions, bears], 6=[tigers]}
We can even change the type of Map returned through yet another parameter.

var ohMy = Stream.of("lions", "tigers", "bears");
TreeMap<Integer, Set<String>> map = ohMy.collect(
   Collectors.groupingBy(
      String::length, 
      TreeMap::new, 
      Collectors.toSet()));
System.out.println(map); // {5=[lions, bears], 6=[tigers]}

Partitioning is a special case of grouping. With partitioning, there are only two possible groups—true and false. Partitioning is like splitting a list into two parts.
var ohMy = Stream.of("lions", "tigers", "bears");
Map<Boolean, List<String>> map = ohMy.collect(
   Collectors.partitioningBy(s -> s.length() <= 5));
System.out.println(map);    // {false=[tigers], true=[lions, bears]}

As with groupingBy(), we can change the type of List to something else.

var ohMy = Stream.of("lions", "tigers", "bears");
Map<Boolean, Set<String>> map = ohMy.collect(
   Collectors.partitioningBy(
      s -> s.length() <= 7, 
      Collectors.toSet()));
System.out.println(map);    // {false=[], true=[lions, tigers, bears]}

----- Important and most compilated example, work on it again and again ----
Finally, there is a mapping() collector that lets us go down a level and add another collector. 
var ohMy = Stream.of("lions", "tigers", "bears");
Map<Integer, Optional<Character>> map = ohMy.collect(
   Collectors.groupingBy(
      String::length,
      Collectors.mapping(
         s -> s.charAt(0), 
         Collectors.minBy((a, b) -> a -b))));
System.out.println(map);    // {5=Optional[b], 6=Optional[t]}
