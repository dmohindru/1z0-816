NIO.2
-----
In this chapter, we focus on the java.nio version 2 API, or NIO.2 for short, to interact with files. NIO.2 is an acronym that stands for the second version of the Non-blocking Input/Output API, and it is sometimes referred to as the “New I/O.”


INTRODUCING NIO.2
-----------------

The goal of the API is to provide a more intuitive, more feature-rich API for working with files and directories. By legacy, we mean that the preferred approach for working with files and directories with newer software applications is to use NIO.2, rather than java.io.File. 

The cornerstone of NIO.2 is the java.nio.file.Path interface. A Path instance represents a hierarchical path on the storage system to a file or directory. You can think of a Path as the NIO.2 replacement for the java.io.File class, although how you use it is a bit different.

Before we get into that, let's talk about what's similar between these two implementations. Both java.io.File and Path objects may refer to an absolute path or relative path within the file system. 

Unlike the java.io.File class, the Path interface contains support for symbolic links. A symbolic link is a special file within a file system that serves as a reference or pointer to another file or directory.

Since Path is an interface, we can't create an instance directly. After all, interfaces don't have constructors! Java provides a number of classes and methods that you can use to obtain Path objects, which we will review in this section.

The simplest and most straightforward way to obtain a Path object is to use the static factory method defined within the Path interface.

// Path factory method
public static Path of(String first, String… more)
It's easy to create Path instances from String values, as shown here:

Path path1 = Path.of("pandas/cuddly.png");	// Creates relative path to current working directory 
Path path2 = Path.of("c:\\zooinfo\\November\\employees.txt"); // Creates absolute path on windows based system
Path path3 = Path.of("/home/zoodirectory");	// Creates absolute path on unix based system

The Path.of() method also includes a varargs to pass additional path elements.  Below code is similar to usage of above code
Path path1 = Path.of("pandas", "cuddly.png");
Path path2 = Path.of("c:", "zooinfo", "November", "employees.txt");
Path path3 = Path.of("/", "home", "zoodirectory");

Determining whether a path is relative or absolute is actually file-system dependent. To match the exam, we adopt the following conventions:
1. If a path starts with a forward slash (/), it is absolute, with / as the root directory. Examples: /bird/parrot.png and /bird/../data/./info
2. If a path starts with a drive letter (c:), it is absolute, with the drive letter as the root directory. Examples: c:/bird/parrot.png and d:/bird/../data/./info
3. Otherwise, it is a relative path. Examples: bird/parrot.png and bird/../data/./info

Another way to obtain a Path instance is from the java.nio.file.Paths factory class. Note the s at the end of the Paths class to distinguish it from the Path interface.
// Paths factory method
public static Path get​(String first, String… more)

Rewriting our previous examples is easy.
Path path1 = Paths.get("pandas/cuddly.png");
Path path2 = Paths.get("c:\\zooinfo\\November\\employees.txt");
Path path3 = Paths.get("/", "home", "zoodirectory");

Another way to construct a Path using the Paths class is with a URI value. A uniform resource identifier (URI) is a string of characters that identify a resource. It begins with a schema that indicates the resource type, followed by a path value. Examples of schema values include file:// for local file systems, and http://, https://, and ftp:// for remote file systems.

The java.net.URI class is used to create URI values.

// URI Constructor
public URI(String str) throws URISyntaxException

Java includes multiple methods to convert between Path and URI objects.

// URI to Path, using Path factory method
public static Path of(URI uri)
 
 // URI to Path, using Paths factory method
public static Path get(URI uri)
 
// Path to URI, using Path instance method
public URI toURI()
The following examples all reference the same file:

URI a = new URI("file://icecream.txt");
Path b = Path.of(a);
Path c = Paths.get(a);
URI d = b.toUri();

The FileSystems class creates instances of the abstract FileSystem class.
// FileSystems factory method
public static FileSystem getDefault()
The FileSystem class includes methods for working with the file system directly.

// FileSystem instance method
public Path getPath​(String first, String… more)

Let's rewrite our three earlier examples one more time to show you how to obtain a Path instance “the long way.”

Path path1 = FileSystems.getDefault().getPath("pandas/cuddly.png");
Path path2 = FileSystems.getDefault()
   .getPath("c:\\zooinfo\\November\\employees.txt");
Path path3 = FileSystems.getDefault().getPath("/home/zoodirectory");

Real world scenario not important for exam
While most of the time we want access to a Path object that is within the local file system, the FileSystems class does give us the freedom to connect to a remote file system, as follows:
// FileSystems factory method
public static FileSystem getFileSystem​(URI uri)
The following shows how such a method can be used:
FileSystem fileSystem = FileSystems.getFileSystem(new URI("http://www.selikoff.net"));
Path path = fileSystem.getPath("duck.txt");

Last but not least, we can obtain Path instances using the legacy java.io.File class. In fact, we can also obtain a java.io.File object from a Path instance.

// Path to File, using Path instance method
public default File toFile()
 
// File to Path, using java.io.File instance method
public Path toPath()

See Figure 9.2 for NIO.2 class and interface relationships

Absolute and relative paths can contain path symbols. A path symbol is a reserved series of characters that have special meaning within some file systems. For the exam, there are two path symbols you need to know

File system symbols
Symbol		Description
-------------------------------------------------------------
.		A reference to the current directory
..		A reference to the parent of the current directory

Refer Table 9.2 for Common NIO.2 method arguments

Many of the methods presented in this chapter declare IOException. Common causes of a method throwing this exception include the following:
1. Loss of communication to underlying file system.
2. File or directory exists but cannot be accessed or modified.
3. File exists but cannot be overwritten.
4. File or directory is required but does not exist.

INTERACTING WITH PATHS
----------------------

Just like String values, Path instances are immutable. In the following example, the Path operation on the second line is lost since p is immutable:

Path p = Path.of("whale");
p.resolve("krill");
System.out.println(p);  // whale

The JVM communicates with the file system to determine the path components or the parent directory of a file, without requiring the file to actually exist. As rule of thumb, if the method declares an IOException, then it usually requires the paths it operates on to exist.

The Path interface contains three methods to retrieve basic information about the path representation.
public String toString()
public int getNameCount()
public Path getName(int index)

The Path interface includes a method to select portions of a path.
public Path subpath(int beginIndex, int endIndex)
The references are inclusive of the beginIndex, and exclusive of the endIndex.

Like getNameCount() and getName(), subpath() is 0-indexed and does not include the root. Also like getName(), subpath() throws an exception if invalid indices are provided.
var q = p.subpath(0, 4); // IllegalArgumentException
var x = p.subpath(1, 1); // IllegalArgumentException

The Path interface contains numerous methods for retrieving particular elements of a Path, returned as Path objects themselves.
public Path getFileName()
public Path getParent() 
public Path getRoot()
The getFileName() returns the Path element of the current file or directory, while getParent() returns the full path of the containing directory. The getParent() returns null if operated on the root path or at the top of a relative path. The getRoot() method returns the root element of the file within the file system, or null if the path is a relative path.

The Path interface contains two methods for assisting with relative and absolute paths:
public boolean isAbsolute()
public Path toAbsolutePath()

The first method, isAbsolute(), returns true if the path the object references is absolute and false if the path the object references is relative. The second method, toAbsolutePath(), converts a relative Path object to an absolute Path object by joining it to the current working directory. If the Path object is already absolute, then the method just returns the Path object.

Suppose you want to concatenate paths in a similar manner as we concatenate strings. The Path interface provides two resolve() methods for doing just that.

public Path resolve(Path other)
public Path resolve(String other)

The first method takes a Path parameter, while the overloaded version is a shorthand form of the first that takes a String (and constructs the Path for you). The object on which the resolve() method is invoked becomes the basis of the new Path object, with the input argument being appended onto the Path.

For the exam, you should be cognizant of mixing absolute and relative paths with the resolve() method. If an absolute path is provided as input to the method, then that is the value that is returned. Simply put, you cannot combine two absolute paths using resolve().

The Path interface includes a method for constructing the relative path from one Path to another, often using path symbols.

public Path relativize(Path other)

The idea is this: if you are pointed at a path in the file system, what steps would you need to take to reach the other path? For example, to get to fish.txt from friendly/birds.txt, you need to go up two levels (the file itself counts as one level) and then select fish.txt.

If both path values are relative, then the relativize() method computes the paths as if they are in the same current working directory. Alternatively, if both path values are absolute, then the method computes the relative path from one absolute location to another, regardless of the current working directory. 

The relativize() method requires that both paths are absolute or both relative and throws an exception if the types are mixed. On Windows-based systems, it also requires that if absolute paths are used, then both paths must have the same root directory or drive letter.

Java provides a method to eliminate unnecessary redundancies in a path.

public Path normalize()
Remember, the path symbol .. refers to the parent directory, while the path symbol . refers to the current directory. We can apply normalize() to some of our previous paths.

var p1 = Path.of("./armadillo/../shells.txt");
System.out.println(p1.normalize()); // shells.txt
 
var p2 = Path.of("/cats/../panther/food");
System.out.println(p2.normalize()); // /panther/food
 
var p3 = Path.of("../../fish.txt");
System.out.println(p3.normalize()); // ../../fish.txt 

While working with theoretical paths is useful, sometimes you want to verify the path actually exists within the file system.

public Path toRealPath(LinkOption… options) throws IOException

This method is similar to normalize(), in that it eliminates any redundant path symbols. It is also similar to toAbsolutePath(), in that it will join the path with the current working directory if the path is relative.

Unlike those two methods, though, toRealPath() will throw an exception if the path does not exist. In addition, it will follow symbolic links, with an optional varargs parameter to ignore them.

We can also use the toRealPath() method to gain access to the current working directory as a Path object.
System.out.println(Paths.get(".").toRealPath());

Summary of Path methods
Path methods
--------------------------------------------------
Path of(String, String…)	Path getParent()
URI toURI()			Path getRoot()
File toFile()			boolean isAbsolute()
String toString()		Path toAbsolutePath()
int getNameCount()		Path relativize(Path other)
Path getName(int)		Path resolve(Path)
Path subpath(int, int)		Path normalize()
Path getFileName()		Path toRealPath(LinkOption…)

In addition, only toRealPath() declares an IOException.



OPERATING ON FILES AND DIRECTORIES
----------------------------------

The Files helper class is capable of interacting with real files and directories within the system. Because of this, most of the methods in this part of the chapter take optional parameters and throw an IOException if the path does not exist.

The first Files method we present is the simplest. It just checks whether the file exists.

public static boolean exists(Path path, LinkOption… options)

Since a path may include path symbols and symbolic links within a file system, it can be difficult to know if two Path instances refer to the same file. Luckily, there's a method for that in the Files class:

public static boolean isSameFile​(Path path, Path path2) throws IOException

While most usages of isSameFile() will trigger an exception if the paths do not exist, there is a special case in which it does not. If the two path objects are equal, in terms of equals(), then the method will just return true without checking whether the file exists.

Note: This isSameFile() method does not compare the contents of the files. Two files may have identical names, content, and attributes, but if they are in different locations, then this method will return false.

To create a directory, we use these Files methods:

public static Path createDirectory​(Path dir,
   FileAttribute<?>… attrs) throws IOException
 
public static Path createDirectories​(Path dir,
   FileAttribute<?>… attrs) throws IOException
The createDirectory() will create a directory and throw an exception if it already exists or the paths leading up to the directory do not exist.

The createDirectories() works just like the java.io.File method mkdirs(), in that it creates the target directory along with any nonexistent parent directories leading up to the path. If all of the directories already exist, createDirectories() will simply complete without doing anything. This is useful in situations where you want to ensure a directory exists and create it if it does not.

The NIO.2 Files class provides a method for copying files and directories within the file system.

public static Path copy​(Path source, Path target,
   CopyOption… options) throws IOException 
The method copies a file or directory from one location to another using Path objects. The following shows an example of copying a file and a directory:

Files.copy(Paths.get("/panda/bamboo.txt"),
   Paths.get("/panda-save/bamboo.txt"));
 
Files.copy(Paths.get("/turtle"), Paths.get("/turtleCopy"));
When directories are copied, the copy is shallow. 

By default, if the target already exists, the copy() method will throw an exception. You can change this behavior by providing the StandardCopyOption enum value REPLACE_EXISTING to the method. For the exam, you need to know that without the REPLACE_EXISTING option, this method will throw an exception if the file already exists.

The Files class includes two copy() methods that operate with I/O streams.

public static long copy​(InputStream in, Path target,
   CopyOption… options) throws IOException
 
public static long copy​(Path source, OutputStream out)
   throws IOException
The first method reads the contents of a stream and writes the output to a file. The second method reads the contents of a file and writes the output to a stream. They are quite convenient if you need to quickly read/write data from/to disk.

For example, let's say we have a file, food.txt, and a directory, /enclosure. Both the file and directory exist. What do you think is the result of executing the following process?

var file = Paths.get("food.txt");
var directory = Paths.get("/enclosure");
Files.copy(file, directory);
If you said it would create a new file at /enclosure/food.txt, then you're way off. It actually throws an exception. The command tries to create a new file, named /enclosure. Since the path /enclosure already exists, an exception is thrown at runtime.

On the other hand, if the directory did not exist, then it would create a new file with the contents of food.txt, but it would be called /enclosure. Remember, we said files may not need to have extensions, and in this example, it matters.

The correct way to copy the file into the directory would be to do the following:
var file = Paths.get("food.txt");
var directory = Paths.get("/enclosure/food.txt");
Files.copy(file, directory);

The Files class provides a useful method for moving or renaming files and directories.

public static Path move​(Path source, Path target,
   CopyOption… options) throws IOException
The following is some sample code that uses the move() method:

Files.move(Path.of("c:\\zoo"), Path.of("c:\\zoo-new"));
 
Files.move(Path.of("c:\\user\\addresses.txt"),
   Path.of("c:\\zoo-new\\addresses2.txt"));
   
Like copy(), move() requires REPLACE_EXISTING to overwrite the target if it exists, else it will throw an exception. Also like copy(), move() will not put a file in a directory if the source is a file and the target is a directory. Instead, it will create a new file with the name of the directory.

Another enum value that you need to know for the exam when working with the move() method is the StandardCopyOption value ATOMIC_MOVE.

Files.move(Path.of("mouse.txt"), Path.of("gerbil.txt"),
   StandardCopyOption.ATOMIC_MOVE);
   
Another enum value that you need to know for the exam when working with the move() method is the StandardCopyOption value ATOMIC_MOVE. Put another way, any process monitoring the file system never sees an incomplete or partially written file. If the file system does not support this feature, an AtomicMoveNotSupportedException will be thrown.

The Files class includes two methods that delete a file or empty directory within the file system.

public static void delete​(Path path) throws IOException
 
public static boolean deleteIfExists​(Path path) throws IOException
To delete a directory, it must be empty. Both of these methods throw an exception if operated on a nonempty directory. In addition, if the path is a symbolic link, then the symbolic link will be deleted, not the path that the symbolic link points to. The delete() method throws an exception if the path does not exist, while the deleteIfExists() method returns true if the delete was successful, and false otherwise.


NIO.2 includes two convenient methods for working with I/O streams.

public static BufferedReader newBufferedReader​(Path path) throws IOException
public static BufferedWriter newBufferedWriter​(Path path, OpenOption… options) throws IOException

Note: There are overloaded versions of these methods that take a Charset. You may remember that we briefly discussed character encoding and Charset in Chapter 8. For this chapter, you just need to know that characters can be encoded in bytes in a variety of ways.

The Files class includes a convenient method for turning the lines of a file into a List.

public static List<String> readAllLines​(Path path) throws IOException
The following sample code reads the lines of the file and outputs them to the user:

var path = Path.of("/animals/gopher.txt");
final List<String> lines = Files.readAllLines(path);
lines.forEach(System.out::println);

Be aware that the entire file is read when readAllLines() is called, with the resulting List<String> storing all of the contents of the file in memory at once. If the file is significantly large, then you may trigger an OutOfMemoryError trying to load all of it into memory.

Table below shows the static methods in the Files class that you should be familiar with for the exam.
boolean exists(Path, LinkOption…)			Path move(Path, Path, CopyOption…)
boolean isSameFile(Path, Path)			void delete(Path)
Path createDirectory(Path, FileAttribute<?>…)		boolean deleteIfExists(Path)
Path createDirectories(Path, FileAttribute<?>…)	BufferedReader newBufferedReader(Path)
Path copy(Path, Path, CopyOption…)			BufferedWriter newBufferedWriter(Path, OpenOption…)
long copy(InputStream, Path, CopyOption…)		List<String> readAllLines(Path)
long copy(Path, OutputStream)	


MANAGING FILE ATTRIBUTES
------------------------

The Files class includes three methods for determining type of a Path.

public static boolean isDirectory​(Path path, LinkOption… options)
public static boolean isSymbolicLink​(Path path)
public static boolean isRegularFile​(Path path, LinkOption… options)

Note: While most methods in the Files class declare IOException, these three methods do not. They return false if the path does not exist.

In many file systems, it is possible to set a boolean attribute to a file that marks it hidden, readable, or executable. The Files class includes methods that expose this information.

public static boolean isHidden​(Path path) throws IOException
public static boolean isReadable(Path path)
public static boolean isWritable(Path path)
public static boolean isExecutable(Path path)

With the exception of isHidden(), these methods do not declare any checked exceptions and return false if the file does not exist.

The Files class includes a method to determine the size of the file in bytes.
public static long size​(Path path) throws IOException

The size returned by this method represents the conceptual size of the data, and this may differ from the actual size on the persistent storage device.

Note: The Files.size() method is defined only on files. Calling Files.size() on a directory is undefined, and the result depends on the file system. If you need to determine the size of a directory and its contents, you'll need to walk the directory tree. We'll show you how to do this later in the chapter.

The Files class provides the following method to retrieve the last time a file was modified:

public static FileTime getLastModifiedTime​(Path path, LinkOption… options) throws IOException
The method returns a FileTime object, which represents a timestamp. For convenience, it has a toMillis() method that returns the epoch time, which is the number of milliseconds since 12 a.m. UTC on January 1, 1970.

final Path path = Paths.get("/rabbit/food.jpg");
System.out.println(Files.getLastModifiedTime(path).toMillis());

Up until now, we have been accessing individual file attributes with multiple method calls. While this is functionally correct, there is often a cost each time one of these methods is called. Put simply, it is far more efficient to ask the file system for all of the attributes at once rather than performing multiple round-trips to the file system.

A view is a group of related attributes for a particular file system type.

NIO.2 includes two methods for working with attributes in a single method call: a read-only attributes method and an updatable view method. For each method, you need to provide a file system type object, which tells the NIO.2 method which type of view you are requesting. By updatable view, we mean that we can both read and write attributes with the same object.

The attributes and view types
Attributes interface	View interface		Description
------------------------------------------------------------------------------------------------------------------------------------------
BasicFileAttributes	BasicFileAttributeView	Basic set of attributes supported by all file systems
DosFileAttributes	DosFileAttributeView	Basic set of attributes along with those supported by DOS/Windows-based systems
PosixFileAttributes	PosixFileAttributeView	Basic set of attributes along with those supported by POSIX systems, such as UNIX, Linux, Mac, etc.

The Files class includes the following method to read attributes of a class in a read-only capacity:
public static <A extends BasicFileAttributes> A readAttributes(Path path, Class<A> type, LinkOption… options) throws IOException

var path = Paths.get("/turtles/sea.txt");
BasicFileAttributes data = Files.readAttributes(path, BasicFileAttributes.class);
 
System.out.println("Is a directory? " + data.isDirectory());
System.out.println("Is a regular file? " + data.isRegularFile());
System.out.println("Is a symbolic link? " + data.isSymbolicLink());
System.out.println("Size (in bytes): " + data.size());
System.out.println("Last modified: " + data.lastModifiedTime());

The following Files method returns an updatable view:
public static <V extends FileAttributeView> V getFileAttributeView​(Path path, Class<V> type, LinkOption… options)
For Example: We can use the updatable view to increment a file's last modified date/time value by 10,000 milliseconds, or 10 seconds.

// Read file attributes
var path = Paths.get("/turtles/sea.txt");
BasicFileAttributeView view = Files.getFileAttributeView(path,
   BasicFileAttributeView.class);
BasicFileAttributes attributes = view.readAttributes();
 
// Modify file last modified time
FileTime lastModifiedTime = FileTime.fromMillis(
   attributes.lastModifiedTime().toMillis() + 10_000);
view.setTimes(lastModifiedTime, null, null);

Note: Not all file attributes can be modified with a view. For example, you cannot set a property that changes a file into a directory. Likewise, you cannot change the size of the object without modifying its contents.

// BasicFileAttributeView instance method
public void setTimes(FileTime lastModifiedTime,
   FileTime lastAccessTime, FileTime createTime)  

APPLYING FUNCTIONAL PROGRAMMING
-------------------------------

The Files class includes some incredibly useful Stream API methods that operate on files, directories, and directory trees.

The following Files method lists the contents of a directory:

public static Stream<Path> list​(Path dir) throws IOException

The Files.list() is similar to the java.io.File method listFiles(), except that it returns a Stream<Path> rather than a File[]

We can use the Files.list() to perform a deep copy.
public void copyPath(Path source, Path target) {
   try {
      Files.copy(source, target);
      if(Files.isDirectory(source))
         try (Stream<Path> s = Files.list(source)) {
            s.forEach(p -> copyPath(p, 
               target.resolve(p.getFileName())));
         }
   } catch(IOException e) {
      // Handle exception
   }
}
For now, you just need to know the JVM will not follow symbolic links when using this stream method.

The NIO.2 stream-based methods open a connection to the file system that must be properly closed, else a resource leak could ensue. A resource leak within the file system means the path may be locked from modification long after the process that used it completed.

The Files class includes two methods for walking the directory tree using a depth-first search.

public static Stream<Path> walk​(Path start, FileVisitOption… options) throws IOException
 
public static Stream<Path> walk​(Path start, int maxDepth, FileVisitOption… options) throws IOException

Like our other stream methods, walk() uses lazy evaluation and evaluates a Path only as it gets to it. This means that even if the directory tree includes hundreds or thousands of files, the memory required to process a directory tree is low. 

Note: Java uses an int for its maximum depth rather than a long because most file systems do not support path values deeper than what can be stored in an int.

The following getPathSize() method walks a directory tree and returns the total size of all the files in the directory:

private long getSize(Path p) {
   try {
      return  Files.size(p);
   } catch (IOException e) {
      // Handle exception
   }
   return 0L;
}
 
public long getPathSize(Path source) throws IOException {
   try (var s = Files.walk(source)) {
      return s.parallel()
            .filter(p -> !Files.isDirectory(p))
            .mapToLong(this::getSize)
            .sum();
   }
}

We can alter our getPathSize() method to enable following symbolic links by adding the FileVisitOption:

try (var s = Files.walk(source, FileVisitOption.FOLLOW_LINKS)) { }

Be aware that when the FOLLOW_LINKS option is used, the walk() method will track all of the paths it has visited, throwing a FileSystemLoopException if a path is visited twice.

In the previous example, we applied a filter to the Stream<Path> object to filter the results, although NIO.2 provides a more convenient method.

public static Stream<Path> find​(Path start, int maxDepth, BiPredicate<Path,​BasicFileAttributes> matcher, FileVisitOption… options) throws IOException

The find() method behaves in a similar manner as the walk() method, except that it takes a BiPredicate to filter the data. It also requires a depth limit be set. Like walk(), find() also supports the FOLLOW_LINK option.

The two parameters of the BiPredicate are a Path object and a BasicFileAttributes object, which you saw earlier in the chapter. In this manner, NIO.2 automatically retrieves the basic file information for you, allowing you to write complex lambda expressions that have direct access to this object. We illustrate this with the following example:

Path path = Paths.get("/bigcats");
long minSize = 1_000;
try (var s = Files.find(path, 10, 
      (p, a) -> a.isRegularFile()
         && p.toString().endsWith(".java")
         && a.size() > minSize)) {
   s.forEach(System.out::println);
}

Above code prints all java files in directory bigcats whose size larger than 1000 bytes

Note: depth parameter in find of 0 point to root directory. In other word nothing will be searched.

Earlier in the chapter, we presented Files.readAllLines() and commented that using it to read a very large file could result in an OutOfMemoryError problem. Luckily, NIO.2 solves this problem with a Stream API method.

public static Stream<String> lines​(Path path) throws IOException
The contents of the file are read and processed lazily, which means that only a small portion of the file is stored in memory at any given time.

Path path = Paths.get("/fish/sharks.log");
try (var s = Files.lines(path)) {
   s.forEach(System.out::println);
}

For the exam, you need to know the difference between readAllLines() and lines(). Both of these examples compile and run:

Files.readAllLines(Paths.get("birds.txt")).forEach(System.out::println);
Files.lines(Paths.get("birds.txt")).forEach(System.out::println);

The first line reads the entire file into memory and performs a print operation on the result, while the second line lazily processes each line and prints it as it is read. The advantage of the second code snippet is that it does not require the entire file to be stored in memory at any time.

Comparison of java.io.File and NIO.2 methods
Legacy I/O File method		NIO.2 method
--------------------------------------------------------------
file.delete()			Files.delete(path)
file.exists()			Files.exists(path)
file.getAbsolutePath()		path.toAbsolutePath()
file.getName()			path.getFileName()
file.getParent()		path.getParent()
file.isDirectory()		Files.isDirectory(path)
file.isFile()			Files.isRegularFile(path)
file.lastModified()		Files.getLastModifiedTime(path)
file.length()			Files.size(path)
file.listFiles()		Files.list(path)
file.mkdir()			Files.createDirectory(path)
file.mkdirs()			Files.createDirectories(path)
file.renameTo(otherFile)	Files.move(path,otherPath)
