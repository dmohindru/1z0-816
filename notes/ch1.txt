FINAL MODIFIER
---------------
Marking a variable final means the value cannot be changed after it is assigned. Marking a method or class final means it cannot be overridden or extended, respectively.

We don't need to assign a value when a final variable is declared. The rule is only that it must be assigned a value before it can be used. 

The compiler does not allow the use of local variables that may not have been assigned a value, whether they are marked final or not.

Just because a variable reference is marked final does not mean the object associated with it cannot be modified. 

Instance and static class variables can also be marked final. If an instance variable is marked final, then it must be assigned a value when it is declared or when the object is instantiated.

Methods marked final cannot be overridden by a subclass. This essentially prevents any polymorphic behavior on the method call and ensures that a specific version of the method is always called.

Like we saw with final methods, classes cannot be marked both abstract and final. 

Interface are also not allowed to be final. The compiler automatically applies the implicit abstract modifier to each interface declaration. Just like abstract classes, interfaces cannot be marked final.

The final modifier can be applied to classes, but not interfaces.

abstract key word is incompatible with final.

var and final can be used together.

Effectively final refers to local variables whose value is not changed after it is set. Hence effectively final is not applicable to instance and static variables



WORKING WITH ENUMS
-------------------

Enumerations show up whenever you have a set of items whose types are known at compile time. Common examples include the compass directions, the months of the year, the planets in the solar system, or the cards in a deck.

Behind the scenes, an enum is a type of class that mainly contains static members.

Another useful feature is retrieving an enum value from a String using the valueOf() method.

One thing that you can't do is extend an enum.

Enum can contain Constructor, Fields and Methods

We mark the instance variable final although this is certainly not required, it is considered a good coding practice to do so. 

Static member variables of enum?

It is legal for initialize enum variable to null
e.g MyEnum myEnum = null; // it is a legal statement

When an enum contains any other members, such as a constructor or variable, then semiconductor it is required.

NESTED CLASSES
---------------
Types: Non-Static Inner class, Static Inner class, Local class, Anonymous class

Interfaces and enums can be declared as both inner classes and static nested classes, but not as local or anonymous classes.

Rules for non-static inner class

* Can be declared public, protected, package-private (default), or private
* Can extend any class and implement interfaces
* Can be marked abstract or final
* Cannot declare static fields or methods, except for static final fields
* Can access members of the outer class including private members

Since an inner class is not static, it has to be used with an instance of the outer class.

To create an instance of inner class in static method of outer class. First we need to create an instance of outer class in outer static method and then
using this instance of outer class we can create an instance of inner class. But this rule does not apply to non-static methods of outer class. Non-static
outer class method can just class new InnerClass(); to create a inner class object.

For multiple level of inner class following is a way to instantiate inner class. 
e.g
OuterClass-->Level1_InnerClass-->Level2_InnerClass

To instinatiate Level1_InnerClass use following syntax
Level1_InnerClass level1 = outerclass_obj.new Level1_InnerClass();
or
OuterClass.Level1_InnerClass level1 = outerclass_obj.new Level1_InnerClass();

To instinatiate Level2_InnerClass use following syntax
OuterClass.Level1_InnerClass.Level2_InnerClass level2 = level1.new() Level2_InnerClass();
or
Level1_InnerClass.Level2_InnerClass level2 = level1.new() Level2_InnerClass();

Outer class can access all the members of non-static inner class including its private members

Rules for static inner class

* The nesting creates a name-space because the enclosing class name must be used to refer to it.
* It can be made private or use one of the other access modifiers to encapsulate it.
* The enclosing class can refer to the fields and methods of the static nested class.

static inner class cannot access the instance member of enclosing class. To access these instance variable enclosing class need to be instantiate in static inner class.


static inner class can have static methods and variables just like any main level class.

To instantiate a inner static class following syntax is used.
StaticInnerClass staticInner = new OuterClass.StaticInnerClass();

Outer class can access all the members of static inner class including its private members


A local class is a nested class defined within a method. Like local variables, a local class declaration does not exist until the method is invoked, and it goes out of scope when the method returns. This means you can create instances only from within the method. Those instances can still be returned from the method. 

Rules for local class
* They do not have an access modifier.
* They cannot be declared static and cannot declare static fields or methods, except for static final fields.
* They have access to all fields and methods of the enclosing class (when defined in an instance method).
* They can access local variables if the variables are final or effectively final.

Reason for local class can access only final or effectively final local variables. 
The compiler is generating a .class file from your local class. A separate class has no way to refer to local variables. If the local variable is final, Java can handle it by passing it to the constructor of the local class or by storing it in the .class file. If it weren't effectively final, these tricks wouldn't work because the value could change after the copy was made.

private members of local class are not accessible outside of class. 

Anonymous classes are required to extend an existing class or implement an existing interface.

Remember that an anonymous class is just an unnamed local class.

With anonymous class, we cannot implement a interface and extends a class at same time.

With anonymous class You can define them right where they are needed, even if that is an argument to another method.

To reference an instance variable from a local class the syntax is as below
EnclosingClass.this.instanceVariableOfClass;


Table 1.1, 1.2, 1.3 important for exams

INTERFACE MEMBERS
-----------------

Interface variable are assumed to static, final and public.

Table 1.4 summary of interface member types

A default method is a method defined in an interface with the default keyword and includes a method body. A default method may be overridden by a class implementing the interface.

A default method allows you to add a new method to an existing interface, without the need to modify older code that implements the interface.

Another motivation for adding default methods to Java is for convenience. If all classes implementing an interface method would have a common implementation, then makes sense to provide a default implementation of that method.

Rules for using Default methods

* A default method may be declared only within an interface.
* A default method must be marked with the default keyword and include a method body.
* A default method is assumed to be public.
* A default method cannot be marked abstract, final, private or static.
* A default method may be overridden by a class that implements the interface.
* If a class inherits two or more default methods with the same method signature, then the class must override the method.  

Default method cannot be marked as final, because they can always be overridden in classes implementing the interface.

Default method cannot be marked static since they are associated with the instance of the class implementing the interface.

If the class implementing the interfaces overrides the duplicate default method, then the code will compile without issue.

An interface can extend multiple interface at once.
e.g. public interface MyInterface extends InterfaceOne, InterfaceTwo {} is a valid statement. Like in class, interface extending more than one interface with a duplicate default method need to override that default method in its body. 

If a class implementing multiple interfaces wants to access default method of particular interface following syntax is used
InterestedInterface.super.defaultMethodName(); and this call must be in instance method and not static method.

Rules for using static interface methods

* A static method must be marked with the static keyword and include a method body.
* A static method without an access modifier is assumed to be public.
* A static method cannot be marked abstract or final.
* A static method is not inherited and cannot be accessed in a class implementing the interface without a reference to the interface name.

A class that implements two interfaces containing static methods with the same signature will still compile.

Like classes, interfaces allow instance methods to access static members, but not vice versa. static methods cannot access instance methods like default and abstract method.

private interface methods can be used to reduce code duplication.

Private Interface Method Definition Rules
* A private interface method must be marked with the private modifier and include a method body.
* A private interface method may be called only by default and private (non- static) methods within the interface definition.

Purpose of private static interface methods is to reduce code duplication in static methods within the interface declaration. 

Private Static Interface Method Definition Rules
* A private static method must be marked with the private and static modifiers and include a method body.
* A private static interface method may be called only by other methods within the interface definition.

Both private and private static methods can be called from default and private methods.

Using private interface methods doesn't just provide a way to reduce code duplication, but also a way to hide some of the underlying implementation details from users of the interface and thus improving encapsulation.

When working with interfaces, we consider abstract, default, and private interface methods as instance methods.

A key distinction, though, is that interfaces do not implement constructors and are not part of the class hierarchy. While a class can implement multiple interfaces, it can only directly extend a single class.

Inner interface a by default static

FUNCTIONAL INTERFACE
---------------------

A functional interface is an interface that contains a single abstract method. 

If a functional interface includes an abstract method with the same signature as a public method found in Object, then those methods do not count toward the single abstract method test.

The left side of the lambda expression lists the variables. It must be compatible with the type and number of input parameters of the functional interface's single abstract method.

The right side of the lambda expression represents the body of the expression. It must be compatible with the return type of the functional interface's abstract method.

Lambda syntax omitting optional part
a -> a.canHop();

Lambda syntax including optional part
(Animal a) -> {return a.canHop();}

As a fun fact, s -> {} is a valid lambda. If the return type of the functional interface method is void, then you don't need the semicolon or return statement.

In lambda expression if the parameter type is specified for one of the parameters, then it must be specified for all of them.

Variables can appear in three places with respect to lambdas: the parameter list, local variables declared inside the lambda body, and variables referenced from the lambda body. All three of these are opportunities for the exam to trick you.

If var is used for one of the types in the parameter list, then it must be used for all parameters in the list.

For local variable inside a lambda expression we cannot use it if were defined in any outside block e.g parameter list of lambda, local variable of inclosing method or argument of inclosing method.

Lambda bodies are allowed to use static variables, instance variables, and local variables if they are final or effectively final. 

Instance variables are allowed if the lambda is used inside an instance method.

final modifier is permitted on variables in the parameter list of lambda expression.



