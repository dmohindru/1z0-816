UNDERSTANDING FILES AND DIRECTORIES
------------------------------------

A file is a record within the storage device that holds data. Files are organized into hierarchies using directories. A directory is a location that can contain files as well as other directories. When working with directories in Java, we often treat them like files. In fact, we use many of the same classes to operate on files and directories. For example, a file and directory both can be renamed with the same Java method.

For the exam, you just need to know how to issue commands using the Java APIs. The JVM will automatically connect to the local file system, allowing you to perform the same operations across multiple platforms.

Finally, a path is a String representation of a file or directory within a file system. Each file system defines its own path separator character that is used between directory entries. 

Data is stored in a file system (and memory) as a 0 or 1, called a bit. Since it's really hard for humans to read/write data that is just 0s and 1s, they are grouped into a set of 8 bits, called a byte.

The File class is used to read information about existing files and directories, list the contents of a directory, and create/delete files and directories.

An instance of a File class represents the path to a particular file or directory on the file system. The File class cannot read or write data within a file, although it can be passed as a reference to many stream classes to read or write data, as you will see in the next section.

A File object often is initialized with a String containing either an absolute or relative path to the file or directory within the file system.

Many programming languages and file systems support both types of slashes when writing path statements. For convenience, Java offers two options to retrieve the local separator character: a system property and a static variable defined in the File class.

System.out.println(System.getProperty("file.separator"));
System.out.println(java.io.File.separator);

There are three File constructors you should know for the exam.

public File(String pathname)
public File(File parent, String child)
public File(String parent, String child)

If the parent instance is null, then it would be skipped, and the method would revert to the single String constructor.

If you try to operate on a file that does not exist or you do not have access to, some File methods will throw an exception.

Commonly used java.io.File methods

Method Name			Description
----------------------------------------------------------------------------------------------------------------------------------------------------------
boolean delete()		Deletes the file or directory and returns true only if successful. If this instance denotes a directory, then the directory 				must be empty in order to be deleted.
boolean exists()		Checks if a file exists
String getAbsolutePath()	Retrieves the absolute name of the file or directory within the file system
String getName()		Retrieves the name of the file or directory.
String getParent()		Retrieves the parent directory that the path is contained in or null if there is none
boolean isDirectory()		Checks if a File reference is a directory within the file system
boolean isFile()		Checks if a File reference is a file within the file system
long lastModified()		Returns the number of milliseconds since the epoch (number of milliseconds since 12 a.m. UTC on January 1, 1970) when the file 					was last modified
long length()			Retrieves the number of bytes in the file
File[] listFiles()		Retrieves a list of files within a directory
boolean mkdir()		Creates the directory named by this path
boolean mkdirs()		Creates the directory named by this path including any nonexistent parent directories
boolean renameTo(File dest)	Renames the file or directory denoted by this path to dest and returns true only if successful

On the exam, you might get paths that look like files but are directories, or vice versa. For example, /data/zoo.txt could be a file or a directory, even though it has a file extension. Don't assume it is either unless the question tells you it is!


INTRODUCING I/O STREAMS
-----------------------

The contents of a file may be accessed or written via a stream, which is a list of data elements presented sequentially. Streams should be conceptually thought of as a long, nearly never-ending “stream of water” with data presented one “wave” at a time.

Even if you come across a particular stream on the exam that you do not recognize, often the name of the stream gives you enough information to understand exactly what it does.

The java.io API defines two sets of stream classes for reading and writing streams: byte streams and character streams.

Differences between Byte and Character Streams
1. Byte streams read/write binary data (0s and 1s) and have class names that end in InputStream or OutputStream.
2. Character streams read/write text data and have class names that end in Reader or Writer.

The API frequently includes similar classes for both byte and character streams, such as FileInputStream and FileReader. The difference between the two classes is based on how the bytes of the stream are read or written.

The byte streams are primarily used to work with binary data, such as an image or executable file, while character streams are used to work with text files.

For the exam, you don't need to memorize the character encodings, but you should be familiar with the names if you come across them on the exam.

In Java, the character encoding can be specified using the Charset class by passing a name value to the static Charset.forName() method, such as in the following examples:

Charset usAsciiCharset = Charset.forName("US-ASCII");
Charset utf8Charset = Charset.forName("UTF-8");
Charset utf16Charset = Charset.forName("UTF-16");

For character encoding, just remember that using a character stream is better for working with text data than a byte stream.

Input vs. Output Streams
Most InputStream stream classes have a corresponding OutputStream class, and vice versa. For example, the FileOutputStream class writes data that can be read by a FileInputStream.

There are exceptions to this rule. For the exam, you should know that PrintWriter has no accompanying PrintReader class. Likewise, the PrintStream is an OutputStream that has no corresponding InputStream class.

Low-Level vs. High-Level Streams
Another way that you can familiarize yourself with the java.io API is by segmenting streams into low-level and high-level streams.

A low-level stream connects directly with the source of the data, such as a file, an array, or a String. Low-level streams process the raw data or resource and are accessed in a direct and unfiltered manner. For example, a FileInputStream is a class that reads file data one byte at a time.

Alternatively, a high-level stream is built on top of another stream using wrapping. Wrapping is the process by which an instance is passed to the constructor of another class, and operations on the resulting instance are filtered and applied to the original instance. For example, take a look at the FileReader and BufferedReader objects in the following sample code:

try (var br = new BufferedReader(new FileReader("zoo-data.txt"))) {
   System.out.println(br.readLine());
}

High-level streams can take other high-level streams as input. For example, although the following code might seem a little odd at first, the style of wrapping a stream is quite common in practice:

try (var ois = new ObjectInputStream(
      new BufferedInputStream(
         new FileInputStream("zoo-data.txt")))) {
   System.out.print(ois.readObject());
}

For the exam, the only low-level stream classes you need to be familiar with are the ones that operate on files. The rest of the nonabstract stream classes are all high-level streams.

The java.io library defines four abstract classes that are the parents of all stream classes defined within the API: InputStream, OutputStream, Reader, and Writer.

The constructors of high-level streams often take a reference to the abstract class. For example, BufferedWriter takes a Writer object as input, which allows it to take any subclass of Writer.

One common area where the exam likes to play tricks on you is mixing and matching stream classes that are not compatible with each other. For example, take a look at each of the following examples and see whether you can determine why they do not compile:
new BufferedInputStream(new FileReader("z.txt"));  // DOES NOT COMPILE
new BufferedWriter(new FileOutputStream("z.txt")); // DOES NOT COMPILE
new ObjectInputStream(
   new FileOutputStream("z.txt"));                 // DOES NOT COMPILE
new BufferedInputStream(new InputStream());        // DOES NOT COMPILE

Review of java.io Class Name Properties
1. A class with the word InputStream or OutputStream in its name is used for reading or writing binary or byte data, respectively.
2. A class with the word Reader or Writer in its name is used for reading or writing character or string data, respectively.
3. Most, but not all, input classes have a corresponding output class.
4. A low-level stream connects directly with the source of the data.
5. A high-level stream is built on top of another stream using wrapping.
6. A class with Buffered in its name reads or writes data in groups of bytes or characters and often improves performance in sequential file systems.
7. With a few exceptions, you only wrap a stream with another stream if they share the same abstract parent.

The java.io abstract stream base classes
Class Name		Description
------------------------------------------------------------------------
InputStream		Abstract class for all input byte streams
OutputStream		Abstract class for all output byte streams
Reader			Abstract class for all input character streams
Writer			Abstract class for all output character streams

The java.io concrete stream classes
Class Name		Low/High Level		Description
---------------------------------------------------------------------------------------------------------------------------------------------------------
FileInputStream	Low			Reads file data as bytes
FileOutputStream	Low			Writes file data as bytes
FileReader		Low			Reads file data as characters
FileWriter		Low			Writes file data as characters
BufferedInputStream	High			Reads byte data from an existing InputStream in a buffered manner, which improves efficiency and performance
BufferedOutputStream	High			Writes byte data to an existing OutputStream in a buffered manner, which improves efficiency and performance
BufferedReader		High			Reads character data from an existing Reader in a buffered manner, which improves efficiency and performance
BufferedWriter		High			Writes character data to an existing Writer in a buffered manner, which improves efficiency and performance
ObjectInputStream	High			Deserializes primitive Java data types and graphs of Java objects from an existing InputStream
ObjectOutputStream	High			Serializes primitive Java data types and graphs of Java objects to an existing OutputStream
PrintStream		High			Writes formatted representations of Java objects to a binary stream
PrintWriter		High			Writes formatted representations of Java objects to a character stream

COMMON I/O STREAM OPERATIONS
-----------------------------

Both InputStream and Reader declare the following method to read byte data from a stream:
// InputStream and Reader
public int read() throws IOException

Likewise, OutputStream and Writer both define the following method to write a byte to the stream:
// OutputStream and Writer
public void write(int b) throws IOException

Note: Other stream classes you will learn about in this chapter throw exceptions to denote the end of the stream rather than a special value like -1.

Note: Most I/O stream methods declare a checked IOException. File or network resources that a stream relies on can disappear at any time, and our programs need be able to readily adapt to these outages.

The byte stream classes also include overloaded methods for reading and writing multiple bytes at a time.
// InputStream
public int read(byte[] b) throws IOException
public int read(byte[] b, int offset, int length) throws IOException
// OutputStream
public void write(byte[] b) throws IOException
public void write(byte[] b, int offset, int length) throws IOException

The offset and length are applied to the array itself. For example, an offset of 5 and length of 3 indicates that the stream should read up to 3 bytes of data and put them into the array starting with position 5.

There are equivalent methods for the character stream classes that use char instead of byte.
// Reader
public int read(char[] c) throws IOException
public int read(char[] c, int offset, int length) throws IOException
 
// Writer
public void write(char[] c) throws IOException
public void write(char[] c, int offset, int length) throws IOException

All I/O streams include a method to release any resources within the stream when it is no longer needed.
// All I/O stream classes
public void close() throws IOException

Since all I/O streams implement Closeable, the best way to do this is with a try-with-resources statement.
try (var fis = new FileInputStream("zoo-data.txt")) {
   System.out.print(fis.read());
}

What about if you need to pass a stream to a method? That's fine, but the stream should be closed in the method that created it.
public void printData(InputStream is) throws IOException {
   int b;
   while ((b = is.read()) != -1) {
      System.out.print(b);
   }
}
 public void readFile(String fileName) throws IOException {
   try (var fis = new FileInputStream(fileName)) {
      printData(fis);
   }
}

When working with a wrapped stream, you only need to use close() on the topmost object. Doing so will close the underlying streams. 
In below code unnecessary three close method calls are made
try (var fis = new FileOutputStream("zoo-banner.txt"); // Unnecessary
         var bis = new BufferedOutputStream(fis);
         var ois = new ObjectOutputStream(bis)) {
       ois.writeObject("Hello");
    }
Instead below code in more preferred one
try (var ois = new ObjectOutputStream(
          new BufferedOutputStream(
             new FileOutputStream("zoo-banner.txt")))) {
       ois.writeObject("Hello");
    }


All input stream classes include the following methods to manipulate the order in which data is read from a stream:

// InputStream and Reader
public boolean markSupported() // Return true only if mark() is supported
public void void mark(int readLimit) // Return stream to earlier position
public void reset() throws IOException // Return stream to earlier marked position
public long skip(long n) throws IOException // Read data from stream and skip it

Tip: Not all input stream classes support mark() and reset(). Make sure to call markSupported() on the stream before calling these methods or an exception will be thrown at runtime.

The return parameter of skip() tells us how many values were actually skipped. For example, if we are near the end of the stream and call skip(1000), the return value might be 20, indicating the end of the stream was reached after 20 values were skipped.

When data is written to an output stream, the underlying operating system does not guarantee that the data will make it to the file system immediately. If the data is cached in memory and the application terminates unexpectedly, the data would be lost, because it was never written to the file system. To address this, all output stream classes provide a flush() method, which requests that all accumulated data be written immediately to disk.
// OutputStream and Writer
public void flush() throws IOException

Common I/O stream methods
Stream Class		Method Name			Description
-----------------------------------------------------------------------------------------------------------------------------------------------------------
All streams		void close()			Closes stream and releases resources
All input streams	int read()			Reads a single byte or returns -1 if no bytes were available
InputStream		int read(byte[] b)	
Reader			int read(char[] c)		Reads values into a buffer. Returns number of bytes read

InputStream		int read(byte[] b, 
			int offset, 
			int length)	
Reader			int read(char[] c, 
			int offset, 
			int length)			Reads up to length values into a buffer starting from position offset. Returns number of bytes read

All output streams	void write(int)		Writes a single byte
OutputStream		void write(byte[] b)	
Writer			void write(char[] c)		Writes an array of values into the stream

OutputStream		void write(byte[] b, 
			int offset, 
			int length)	
Writer			void write(char[] c, 
			int offset, 
			int length)			Writes length values from an array into the stream, starting with an offset index
			
All input streams	boolean markSupported()	Returns true if the stream class supports mark()
All input streams	void mark(int readLimit)	Marks the current position in the stream
All input streams	void reset()			Attempts to reset the stream to the mark() position
All input streams	long skip(long n)		Reads and discards a specified number of characters
All output streams	void flush()			Flushes buffered data through the stream

WORKING WITH I/O STREAM CLASSES
-------------------------------

The first stream classes that we are going to discuss in detail are the most basic file stream classes, FileInputStream and FileOutputStream. 

public FileInputStream(File file) throws FileNotFoundException
public FileInputStream(String name) throws FileNotFoundException
public FileOutputStream(File file) throws FileNotFoundException
public FileOutputStream(String name) throws FileNotFoundException

As discussed earlier, that's because there is a cost associated with each round-trip to the file system. We can easily enhance our implementation using BufferedInputStream and BufferedOutputStream.

public BufferedInputStream(InputStream in)
public BufferedOutputStream(OutputStream out)

The Buffered classes contain a number of performance improvements for managing data in memory. For example, the BufferedInputStream class is capable of retrieving and storing in memory more data than you might request with a single read(byte[]) call. For successive calls to the read(byte[]) method with a small byte array, using the Buffered classes would be faster in a wide variety of situations, since the data can be returned directly from memory without going to the file system.

The FileReader and FileWriter classes, along with their associated buffer classes, are among the most convenient I/O classes because of their built-in support for text data. They include constructors that take the same input as the binary file classes.

public FileReader(File file) throws FileNotFoundException
public FileReader(String name) throws FileNotFoundException

public FileWriter(File file) throws FileNotFoundException
public FileWriter(String name) throws FileNotFoundException

The FileWriter inherits a method from the Writer class that allows it to write String values.
// Writer
public void write(String str) throws IOException
For example, the following is supported in FileWriter but not FileOutputStream:

writer.write("Hello World");

Like we saw with byte streams, Java includes high-level buffered character streams that improve performance. The constructors take existing Reader and Writer instances as input.

public BufferedReader(Reader in)
 
public BufferedWriter(Writer out)

They add two new methods, readLine() and newLine(), that are particularly useful when working with String values.
// BufferedReader
public String readLine() throws IOException
 // BufferedWriter
public void newLine() throws IOException

You can certainly use the I/O stream classes you've learned about so far to store text and binary data, but you still have to figure out how to put the data in the stream and then decode it later. There are various file formats like XML and CSV you can standardize to, but oftentimes you have to build the translation yourself.

Luckily, we can use serialization to solve the problem of how to convert objects to/from a stream. Serialization is the process of converting an in-memory object to a byte stream. Likewise, deserialization is the process of converting from a byte stream into an object. Serialization often involves writing an object to a stored or transmittable format, while deserialization is the reciprocal process.

To serialize an object using the I/O API, the object must implement the java.io.Serializable interface. The Serializable interface is a marker interface, similar to the marker annotations you learned about in Chapter 2, “Annotations.” By marker interface, it means the interface does not have any methods.

The purpose of using the Serializable interface is to inform any process attempting to serialize the object that you have taken the proper steps to make the object serializable. All Java primitives and many of the built-in Java classes that you have worked with throughout this book are Serializable. For example, this class can be serialized:

import java.io.Serializable;
public class Gorilla implements Serializable {
   private static final long serialVersionUID = 1L;
   private String name;
   private int age;
   private Boolean friendly;
   private transient String favoriteFood;
 
   // Constructors/Getters/Setters/toString() omitted
}

In above example three instance members (name, age, friendly) will be saved to stream if class is serialized. Any field marked transient will not be saved to stream when class is serialized. Hence favoriteFood will not be serialized. 

It's a good practice to declare a static serialVersionUID variable in every class that implements Serializable. The version is stored with each object as part of serialization. Then, every time the class structure changes, this value is updated or incremented. The idea is a class could have been serialized with an older version of the class and deserialized with a newer version of the class. If an older version of the class is encountered during deserialization, a java.io.InvalidClassException may be thrown. Alternatively, some APIs support converting data between versions.

Oftentimes, the transient modifier is used for sensitive data of the class, like a password. There are other objects it does not make sense to serialize, like the state of an in-memory Thread. If the object is part of a serializable object, we just mark it transient to ignore these select instance members.

What happens to data marked transient on deserialization? It reverts to its default Java values, such as 0.0 for double, or null for an object. 

Note: Marking static fields transient has little effect on serialization. Other than the serialVersionUID, only the instance members of a class are serialized.

Any process attempting to serialize an object will throw a NotSerializableException if the class does not implement the Serializable interface properly. 

How to Make a Class Serializable

1. The class must be marked Serializable.
2. Every instance member of the class is serializable, marked transient, or has a null value at the time of serialization.
Be careful with the second rule. For a class to be serializable, we must apply the second rule recursively.

The ObjectInputStream class is used to deserialize an object from a stream, while the ObjectOutputStream is used to serialize an object to a stream. They are high-level streams that operate on existing streams.

public ObjectInputStream(InputStream in) throws IOException

public ObjectOutputStream(OutputStream out) throws IOException

While both of these classes contain a number of methods for built-in data types like primitives, the two methods you need to know for the exam are the ones related to working with objects.

// ObjectInputStream
public Object readObject() throws IOException, ClassNotFoundException
 
// ObjectOutputStream
public void writeObject(Object obj) throws IOException

When calling readObject(), null and -1 do not have any special meaning, as someone might have serialized objects with those values. Unlike our earlier techniques for reading methods from an input stream, we need to use an infinite loop to process the data, which throws an EOFException when the end of the stream is reached.

Tip: If your program happens to know the number of objects in the stream, then you can call readObject() a fixed number of times, rather than using an infinite loop.

For the exam, you need to understand how a deserialized object is created. When you deserialize an object, the constructor of the serialized class, along with any instance initializers, is not called when the object is created. Java will call the no-arg constructor of the first nonserializable parent class it can find in the class hierarchy. In our Gorilla example, this would just be the no-arg constructor of Object.

The print stream classes have the distinction of being the only I/O stream classes we cover that do not have corresponding input stream classes. And unlike other OutputStream classes, PrintStream does not have Output in its name.

The print stream classes include the following constructors:

public PrintStream(OutputStream out)
 
public PrintWriter(Writer out)

For convenience, these classes also include constructors that automatically wrap the print stream around a low-level file stream class, such as FileOutputStream and FileWriter.

public PrintStream(File file) throws FileNotFoundException
public PrintStream(String fileName) throws FileNotFoundException
 
public PrintWriter(File file) throws FileNotFoundException
public PrintWriter(String fileName) throws FileNotFoundException

This is one of the few exceptions in which we can mix a byte and character stream.
public PrintWriter(OutputStream out)

print()
The most basic of the print-based methods is print(). The print stream classes include numerous overloaded versions of print(), which take everything from primitives and String values, to objects.

println()
The next methods available in the PrintStream and PrintWriter classes are the println() methods, which are virtually identical to the print() methods, except that they also print a line break after the String value is written.

Like the file.separator property, the line.separatorvalue is available from two places, as a Java system property and via a static method.
System.getProperty("line.separator");
System.lineSeparator();

Each print stream class includes a format() method, which includes an overloaded version that takes a Locale.

// PrintStream
public PrintStream format(String format, Object args…)
public PrintStream format(Locale loc, String format, Object args…)
 
// PrintWriter
public PrintWriter format(String format, Object args…)
public PrintWriter format(Locale loc, String format, Object args…)

As an example, the following two format() calls print the same text:

String name = "Lindsey";
int orderId = 5;
 
// Both print: Hello Lindsey, order 5 is ready
System.out.format("Hello "+name+", order "+orderId+" is ready");
System.out.format("Hello %s, order %d is ready", name, orderId);

Common print stream format() symbols

Symbol	Description
-------------------------------------------------------------
%s	Applies to any type, commonly String values
%d	Applies to integer values like int and long
%f	Applies to floating-point values like float and double
%n	Inserts a line break using the system-dependent line separator

String name = "James";
double score = 90.25;
int total = 100;
System.out.format("%s:%n   Score: %f out of %d", name, score, total);
This prints the following:

James:
   Score: 90.250000 out of 100
   
For example, the following throws an exception because a floating-point number is used when an integer value is expected:
System.out.format("Food: %d tons", 2.0); // IllegalFormatConversionException

The format() method also supports two additional features. You can specify the total length of output by using a number before the decimal symbol. By default, the method will fill the empty space with blank spaces. You can also fill the empty space with zeros, by placing a single zero before the decimal symbol. The following examples use brackets, [], to show the start/end of the formatted value:

var pi = 3.14159265359;
System.out.format("[%f]",pi);      // [3.141593]
System.out.format("[%12.8f]",pi);  // [  3.14159265]
System.out.format("[%012f]",pi);   // [00003.141593]
System.out.format("[%12.2f]",pi);  // [        3.14]
System.out.format("[%.3f]",pi);    // [3.142]

Most of the time, you can't wrap byte and character streams with each other, although as we mentioned, there are exceptions. The InputStreamReader class wraps an InputStream with a Reader, while the OutputStreamWriter class wraps an OutputStream with a Writer.

    try (Reader r = new InputStreamReader(System.in);
         Writer w = new OutputStreamWriter(System.out)) {
    }
    
Refer Table 8.4 for stream classes important in exam


INTERACTING WITH USERS
-----------------------

Java includes two PrintStream instances for providing information to the user: System.out and System.err. The syntax for calling and using System.err is the same as System.out but is used to report errors to the user in a separate stream from the regular output information.

The System.in returns an InputStream and is used to retrieve text input from the user. It is commonly wrapped with a BufferedReader via an InputStreamReader to use the readLine() method.

var reader = new BufferedReader(new InputStreamReader(System.in));
String userInput = reader.readLine();
System.out.println("You entered: " + userInput);

You might have noticed that we never created or closed System.out, System.err, and System.in when we used them. Because these are static objects, the System streams are shared by the entire application. The JVM creates and opens them for us. Closing the System streams makes them permanently unavailable for all threads in the remainder of the program.

The java.io.Console class is specifically designed to handle user interactions. After all, System.in and System.out are just raw streams, whereas Console is a class with numerous methods centered around user input.

The Console class is a singleton because it is accessible only from a factory method and only one instance of it is created by the JVM.

Console c = new Console();  // DOES NOT COMPILE

The following snippet shows how to obtain a Console and use it to retrieve user input:

Console console = System.console();
if (console != null) {
   String userInput = console.readLine();
   console.writer().println("You entered: " + userInput);
} else {
   System.err.println("Console not available");
}

The Console class includes access to two streams for reading and writing data.

public Reader reader()

public PrintWriter writer()

For printing data with a Console, you can skip calling the writer().format() and output the data directly to the stream in a single call.

public Console format(String format, Object… args)

The Console class includes four methods for retrieving regular text data from the user.

public String readLine()
public String readLine(String fmt, Object… args)
 
public char[] readPassword()
public char[] readPassword(String fmt, Object… args)
