REVIEWING EXCEPTIONS
--------------------
A try statement is used to handle exceptions. It consists of a try clause, zero or more catch clauses to handle the exceptions that are thrown, and an optional finally clause, which runs regardless of whether an exception is thrown. Figure 5.1 shows the syntax of a try statement.

A traditional try statement must have at least one of the following: a catch block or a finally block. It can have more than one catch block, including multi‐catch blocks, but at most one finally block.

You can also create a try‐with‐resources statement to handle exceptions. A try‐with‐resources statement looks a lot like a try statement, except that it includes a list of resources inside a set of parentheses, (). These resources are automatically closed in the reverse order that they are declared at the conclusion of the try clause. 

By now, you should know the difference between throw and throws. The throw keyword means an exception is actually being thrown, while the throws keyword indicates that the method merely has the potential to throw that exception. The following example uses both:
10: public String getDataFromDatabase() throws SQLException {
11:    throw new UnsupportedOperationException();
12: }

Refer Figure 5.3 for category of exceptions

To begin with, a checked exception must be handled or declared by the application code where it is thrown. The handle or declare rule dictates that a checked exception must be either caught in a catch block or thrown to the caller by including it in the method declaration.

In Java, all exceptions that inherit Exception but not RuntimeException are considered checked exceptions.

Unchecked exceptions are often referred to as runtime exceptions, although in Java unchecked exceptions include any class that inherits RuntimeException or Error. An Error is fatal, and it is considered a poor practice to catch it.

Unchecked exceptions
--------------------
1. ArithmeticException		6. ArrayIndexOutOfBoundsException
2. ArrayStoreException		7. ClassCastException
3. IllegalArgumentException	8. IllegalStateException
4. MissingResourceException	9. NullPointerException
5. NumberFormatException	10.UnsupportedOperationException

Checked exceptions
------------------
1. FileNotFoundException	4. IOException
2. NotSerializableException	5. ParseException
3. SQLException

Since FileNotFoundException is a subclass of IOException, listing both in a multi‐ catch expression is redundant, resulting in a compilation error. 
try {
   throw new IOException();
} catch (IOException | FileNotFoundException e) {} // DOES NOT COMPILE

Ordering of exceptions in consecutive catch blocks matters too.
try {
   throw new IOException();
   } catch (IOException e) {
} catch (FileNotFoundException e) {} // DOES NOT COMPILE

For the exam, remember that trying to catch a more specific exception (after already catching a broader exception) results in unreachable code and a compiler error.

CREATING CUSTOM EXCEPTIONS
--------------------------
When creating your own exception, you need to decide whether it should be a checked or unchecked exception. While you can extend any exception class, it is most common to extend Exception (for checked) or RuntimeException (for unchecked).

1: class CannotSwimException extends Exception {} 	// checked exception
2: class DangerInTheWater extends RuntimeException {} // unchecked exception
3: class SharkInTheWaterException extends DangerInTheWater {} // unchecked exception
4: class Dolphin {
5:    public void swim() throws CannotSwimException {
6:       // logic here
7:    }
8: }

The following example shows the three most common constructors defined by the Exception class:
public class CannotSwimException extends Exception {
   public CannotSwimException() {
      super();  // Optional, compiler will insert automatically
   }
   public CannotSwimException(Exception e) {
      super(e);
   }
   public CannotSwimException(String message) {
      super(message);
   }
}
The first constructor is the default constructor with no parameters. The second constructor shows how to wrap another exception inside yours. The third constructor shows how to pass a custom error message.

The error messages that we've been showing are called stack traces. A stack trace shows the exception along with the method calls it took to get there. The JVM automatically prints a stack trace when an exception is thrown that is not handled by the program. You can also print the stack trace on your own with
printStackTrace();

AUTOMATIC RESOURCE MANAGEMENT
-----------------------------
As previously described, a try‐with‐resources statement ensures that any resources declared in the try clause are automatically closed at the conclusion of the try block. This feature is also known as automatic resource management, because Java automatically takes care of closing the resources for you.

 If an object connected to a resource is not closed, then the connection could remain open. In fact, it may interfere with Java's ability to garbage collect the object. To eliminate this problem, it is recommended that you close resources in the same block of code that opens them. By using a try‐with‐resources statement to open all your resources, this happens automatically.
 
The first rule you should know is: try‐with‐resources statements require resources that implement the AutoCloseable interface. For example, the following does not compile as String does not implement the AutoCloseable interface:

try (String reptile = "lizard") {
}

Inheriting AutoCloseable requires implementing a compatible close() method.
interface AutoCloseable {
   public void close() throws Exception;
}

Since Closeable extends AutoCloseable, they are both supported in try‐with‐resources statements. 

Behind the scenes, the JVM calls the close() method inside a hidden finally block, which we can refer to as the implicit finally block. The finally block that the programmer declared can be referred to as the explicit finally block.

The second rule you should be familiar with is: a try‐with‐resources statement can include multiple resources, which are closed in the reverse order in which they are declared. Resources are terminated by a semicolon (;), with the last one being optional.

The final rule you should know is: resources declared within a try‐with‐resources statement are in scope only within the try block.
3: try (Scanner s = new Scanner(System.in)) {
4:    s.nextLine();
5: } catch(Exception e) {
6:    s.nextInt(); // DOES NOT COMPILE
7: } finally {
8:    s.nextInt(); // DOES NOT COMPILE
9: }

Starting with Java 9, it is possible to use resources declared prior to the try‐with‐resources statement, provided they are marked final or effectively final.

The other place the exam might try to trick you is accessing a resource after it has been closed. Consider the following:
41: var writer = Files.newBufferedWriter(path);
42: writer.append("This write is permitted but a really bad idea!");
43: try(writer) {
44:    writer.append("Welcome to the zoo!");
45: }
46: writer.append("This write will fail!");  // IOException
This code compiles but throws an exception on line 46 with the message Stream closed. While it was possible to write to the resource before the try‐with‐resources statement, it is not afterward.

--Read topic Understanding Suppressed Exceptions from book--
Basic under standing of this topic. Suppressed exception are exception that are throw from the close method of AutoCloseable resources in try clause. If a try block throws another exception then it will preserve the suppressed exception which can be extracted from in catch block as under
catch(Expection e)
{
   for(Throwable exception: e.getSuppressed()) {
   	System.out.println(exception.getMessage());
   }
}
But if exception is thrown from a catch/finally block then the suppressed exceptions in try clause are lost.

Note: If more than two resources throw an exception, the first one to be thrown becomes the primary exception, with the rest being grouped as suppressed exceptions. And since resources are closed in reverse order in which they are declared, the primary exception would be on the last declared resource that throws an exception.

DECLARING ASSERTIONS
--------------------
An assertion is a boolean expression that you place at a point in your code where you expect something to be true. An assert statement contains this statement along with an optional message.

Syntax for assert statement
assert test_value;
assert test_value: message;

When assertions are enabled and the boolean expression evaluates to false, then an AssertionError will be thrown at runtime. Since programs aren't supposed to catch an Error, this means that assertion failures are fatal and end the program!

Assertions may include optional parentheses and a message. For example, each of the following is valid:
assert 1 == age;
assert(2 == height);
assert 100.0 == length : "Problem with length";
assert ("Cecelia".equals(name)): "Failed to verify user data";

When provided, the error message will be sent to the AssertionError constructor. It is commonly a String, although it can be any value.

The three possible outcomes of an assert statement are as follows:
1. If assertions are disabled, Java skips the assertion and goes on in the code.
2. If assertions are enabled and the boolean expression is true, then our assertion has been validated and nothing happens. The program continues to execute in its normal manner.
3. If assertions are enabled and the boolean expression is false, then our assertion is invalid and an AssertionError is thrown.

To enable assertions use following commands
java -enableassertions Rectangle
java -ea Rectangle

Using the ‐enableassertions or ‐ea flag without any arguments enables assertions in all classes (except system classes). You can also enable assertions for a specific class or package.

For example, the following command enables assertions only for classes in the com.demos package and any subpackages:
java -ea:com.demos... my.programs.Main

You can also enable assertions for a specific class.
java -ea:com.demos.TestColors my.programs.Main

Sometimes you want to enable assertions for the entire application but disable it for select packages or classes. Java offers the ‐disableassertions or ‐da flag for just such an occasion.
The following command enables assertions for the com.demos package but disables assertions for the TestColors class:
java -ea:com.demos... -da:com.demos.TestColors my.programs.Main

Assertion applications

Usage				Description
-------------------------------------------------------------------------------------------------------------------------------------------------------
Internal invariants		Assert that a value is within a certain constraint, such as assert x < 0.
Class invariants		Assert the validity of an object's state. Class invariants are typically private methods within the class that return a 					boolean.
Control flow invariants	Assert that a line of code you assume is unreachable is never reached.
Pre‐conditions			Assert that certain conditions are met before a method is invoked.
Post‐conditions	Assert that certain conditions are met after a method executes successfully.

One of the most important rules you should remember from this section is: assertions should never alter outcomes. This is especially true because assertions can, should, and probably will be turned off in a production environment.
int x = 10;
assert ++x> 10; // Not a good design!

WORKING WITH DATES AND TIMES
----------------------------
Date and time types
Class				Description					Example
---------------------------------------------------------------------------------------------------------
java.time.LocalDate		Date with day, month, year			Birth date
java.time.LocalTime		Time of day					Midnight
java.time.LocalDateTime	Day and time with no time zone		10 a.m. next Monday
java.time.ZonedDateTime	Date and time with a specific time zone	9 a.m. EST on 2/20/2021

Each of these types contains a static method called now() that allows you to get the current value.

We can create some date and time values using the of() methods in each class.
LocalDate date1 = LocalDate.of(2020, Month.OCTOBER, 20);
LocalDate date2 = LocalDate.of(2020, 10, 20);

When creating a time, you can choose how detailed you want to be.
LocalTime time1 = LocalTime.of(6, 15);           // hour and minute
LocalTime time2 = LocalTime.of(6, 15, 30);       // + seconds
LocalTime time3 = LocalTime.of(6, 15, 30, 200);  // + nanoseconds

You can combine dates and times in multiple ways.
var dt1 = LocalDateTime.of(2020, Month.OCTOBER, 20, 6, 15, 30);

LocalDate date = LocalDate.of(2020, Month.OCTOBER, 20);
LocalTime time = LocalTime.of(6, 15);
var dt2 = LocalDateTime.of(date, time);

The date and time classes support many methods to get data out of them.

LocalDate date = LocalDate.of(2020, Month.OCTOBER, 20);
System.out.println(date.getDayOfWeek());  // TUESDAY
System.out.println(date.getMonth());      // OCTOBER
System.out.println(date.getYear());       // 2020
System.out.println(date.getDayOfYear());  // 294
Java provides a class called DateTimeFormatter to display standard formats.

LocalDate date = LocalDate.of(2020, Month.OCTOBER, 20);
LocalTime time = LocalTime.of(11, 12, 34);
LocalDateTime dt = LocalDateTime.of(date, time);
 
System.out.println(date.format(DateTimeFormatter.ISO_LOCAL_DATE));
System.out.println(time.format(DateTimeFormatter.ISO_LOCAL_TIME));
System.out.println(dt.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));

The DateTimeFormatter will throw an exception if it encounters an incompatible type. For example, each of the following will produce an exception at runtime since it attempts to format a date with a time value, and vice versa:

System.out.println(date.format(DateTimeFormatter.ISO_LOCAL_TIME));
System.out.println(time.format(DateTimeFormatter.ISO_LOCAL_DATE));

What about the number of symbols? The number often dictates the format of the date/time part. Using M by itself outputs the minimum number of characters for a month, such as 1 for January, while using MM always outputs two digits, such as 01. Furthermore, using MMM prints the three‐letter abbreviation, such as Jul for July, while MMMM prints the full month name.

Common date/time symbols
Symbol		Meaning			Examples
---------------------------------------------------------------------------------
y		Year				20, 2020
M		Month				1, 01, Jan, January
d		Day				5, 05
h		Hour				9, 09
m		Minute				45
s		Second				52
a		a.m./p.m.			AM, PM
z		Time Zone Name			Eastern Standard Time, EST
Z		Time Zone Offset		‐0400


Table below shows which symbols you can use with each of the date/time objects.

TABLE Supported date/time symbols
Symbol	LocalDate	LocalTime	LocalDateTime	ZonedDateTime
--------------------------------------------------------------------
y	√				√		√
M	√				√		√
d	√				√		√
h			√		√		√
m			√		√		√
s			√		√		√
a			√		√		√
z							√
Z							√


What if you want your format to include some custom text values? If you just type it as part of the format String, the formatter will interpret each character as a date/time symbol. In the best case, it will display weird data based on extra symbols you enter. In the worst case, it will throw an exception because the characters contain invalid symbols. Neither is desirable!

var dt = LocalDateTime.of(2020, Month.OCTOBER, 20, 6, 15, 30);
var f1 = DateTimeFormatter.ofPattern("MMMM dd, yyyy ");
var f2 = DateTimeFormatter.ofPattern(" hh:mm");
System.out.println(dt.format(f1) + "at" + dt.format(f2));	//This prints October 20, 2020 at 06:15 at runtime.

You can escape the text by surrounding it with a pair of single quotes ('). Escaping text instructs the formatter to ignore the values inside the single quotes and just insert them as part of the final value.
var f = DateTimeFormatter.ofPattern("MMMM dd, yyyy 'at' hh:mm");
System.out.println(dt.format(f));  // October 20, 2020 at 06:15

But what if you need to display a single quote in the output too? Welcome to the fun of escaping characters! Java supports this by putting two single quotes next to each other.
var g1 = DateTimeFormatter.ofPattern("MMMM dd', Party''s at' hh:mm");
System.out.println(dt.format(g1)); // October 20, Party's at 06:15
var g2 = DateTimeFormatter.ofPattern("'System format, hh:mm: 'hh:mm");
System.out.println(dt.format(g2)); // System format, hh:mm: 06:15
var g3 = DateTimeFormatter.ofPattern("'NEW! 'yyyy', yay!'");
System.out.println(dt.format(g3)); // NEW! 2020, yay!

DateTimeFormatter.ofPattern("The time is hh:mm");  // Exception thrown
DateTimeFormatter.ofPattern("'Time is: hh:mm: ");  // Exception thrown
Failure to terminate an escape sequence will trigger an exception at runtime.

SUPPORTING INTERNATIONALIZATION AND LOCALIZATION
-------------------------------------------------
Internationalization is the process of designing your program so it can be adapted. This involves placing strings in a properties file and ensuring the proper data formatters are used. 
Localization means actually supporting multiple locales or geographic regions. You can think of a locale as being like a language and country pairing. Localization includes translating strings to different languages. It also includes outputting dates and numbers in the correct format for that locale.

Note: Initially, your program does not need to support multiple locales. The key is to future‐proof your application by using these techniques. This way, when your product becomes successful, you can add support for new languages or regions without rewriting everything.

The Locale class is in the java.util package. The first useful Locale to find is the user's current locale. Try running the following code on your computer:
Locale locale = Locale.getDefault();
System.out.println(locale);

Refer Fig. 5.5 Locale format
fr // lower case language code
en_US // lower case language code, upper case country code

US    // Cannot have country without language
enUS  // Missing underscore
US_en // The country and language are reversed
EN    // Language must be lowercase
The corrected versions are en and en_US. 

As a developer, you often need to write code that selects a locale other than the default one. There are three common ways of doing this. The first is to use the built‐in constants in the Locale class, available for some common locales.
System.out.println(Locale.GERMAN);  // de
System.out.println(Locale.GERMANY); // de_DE

The second way of selecting a Locale is to use the constructors to create a new object. You can pass just a language, or both a language and country:
System.out.println(new Locale("fr"));       // fr - French Language
System.out.println(new Locale("hi", "IN")); // hi_IN - Hindi India

Java will let you create a Locale with an invalid language or country, such as xx_XX. However, it will not match the Locale that you want to use, and your program will not behave as expected.

There's a third way to create a Locale that is more flexible. The builder design pattern lets you set all of the properties that you care about and then build it at the end. This means that you can specify the properties in any order. The following two Locale values both represent en_US:
Locale l1 = new Locale.Builder()
   .setLanguage("en")
   .setRegion("US")
   .build();
 
Locale l2 = new Locale.Builder()
   .setRegion("US")
   .setLanguage("en")
   .build();
   
When testing a program, you might need to use a Locale other than the default of your computer.
System.out.println(Locale.getDefault()); // en_US
Locale locale = new Locale("fr");
Locale.setDefault(locale);               // change the default
System.out.println(Locale.getDefault()); // fr

Factory methods to get a NumberFormat
Description					Using default Locale and a specified Locale
---------------------------------------------------------------------------------------------------------------------------------
A general‐purpose formatter			NumberFormat.getInstance(), NumberFormat.getInstance(locale)
Same as getInstance				NumberFormat.getNumberInstance(), NumberFormat.getNumberInstance(locale)
For formatting monetary amounts		NumberFormat.getCurrencyInstance(), NumberFormat.getCurrencyInstance(locale)
For formatting percentages			NumberFormat.getPercentInstance(), NumberFormat.getPercentInstance(locale)
Rounds decimal values before displaying	NumberFormat.getIntegerInstance() NumberFormat.getIntegerInstance(locale)

The format classes are not thread‐safe. Do not store them in instance variables or static variables.

When we format data, we convert it from a structured object or primitive value into a String. 
The NumberFormat.format() method formats the given number based on the locale associated with the NumberFormat object.
var us = NumberFormat.getInstance(Locale.US);
System.out.println(us.format(attendeesPerMonth));
var myLocale = NumberFormat.getCurrencyInstance();
System.out.println(myLocale.format(price));

Note: In the real world, use int or BigDecimal for money and not double. Doing math on amounts with double is dangerous because the values are stored as floating‐point numbers. Your boss won't appreciate it if you lose pennies or fractions of pennies during transactions!

When we parse data, we convert it from a String to a structured object or primitive value. The NumberFormat.parse() method accomplishes this and takes the locale into consideration.

Note: The parse() method, found in various types, declares a checked exception ParseException that must be handled or declared in the method in which they are called.

The lesson is to make sure that you parse using the right locale!

The parse method strips out the characters and converts the value to a number. The return value of parse is a Number object. Number is the parent class of all the java.lang wrapper classes, so the return value can be cast to its appropriate data type.

Like you saw earlier when working with dates, you can also create your own number format strings using the DecimalFormat class, which extends NumberFormat. When creating a DecimalFormat object, you use a constructor rather than a factory method.

Symbol	Meaning						Examples
-------------------------------------------------------------------------
#	Omit the position if no digit exists for it.		$2.2
0	Put a 0 in the position if no digit exists for it.	$002.20
